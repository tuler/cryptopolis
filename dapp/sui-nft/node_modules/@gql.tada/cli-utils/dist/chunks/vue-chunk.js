var e = require("typescript");

var t = require("@vue/compiler-dom");

var r = require("@vue/language-core");

function _interopNamespaceDefault(e) {
  var t = Object.create(null);
  if (e) {
    Object.keys(e).forEach((function(r) {
      if ("default" !== r) {
        var o = Object.getOwnPropertyDescriptor(e, r);
        Object.defineProperty(t, r, o.get ? o : {
          enumerable: !0,
          get: function() {
            return e[r];
          }
        });
      }
    }));
  }
  t.default = e;
  return t;
}

var o = _interopNamespaceDefault(t);

var a = _interopNamespaceDefault(r);

function* forEachEmbeddedCode(e) {
  yield e;
  if (e.embeddedCodes) {
    for (var t of e.embeddedCodes) {
      yield* forEachEmbeddedCode(t);
    }
  }
}

var i;

if ("VueVirtualCode" in a) {
  i = a.VueVirtualCode;
} else if ("VueGeneratedCode" in a) {
  i = a.VueGeneratedCode;
}

var s;

if ("getBasePlugins" in a) {
  s = a.getBasePlugins;
} else if ("getDefaultVueLanguagePlugins" in a) {
  s = a.getDefaultVueLanguagePlugins;
}

var n = a.resolveVueCompilerOptions({});

var f;

exports.transform = t => {
  if (!i || !s) {
    return;
  } else if (!f) {
    (f = s({
      modules: {
        typescript: e,
        "@vue/compiler-dom": o
      },
      compilerOptions: {},
      globalTypesHolder: void 0,
      vueCompilerOptions: n
    })).push({
      version: 2,
      parseSFC: (e, t) => r.parse(t),
      updateSFC(e, t) {
        var r = [ e.descriptor.template, e.descriptor.script, e.descriptor.scriptSetup, ...e.descriptor.styles, ...e.descriptor.customBlocks ].filter((e => !!e));
        var o = r.find((e => t.start >= e.loc.start.offset && t.end <= e.loc.end.offset));
        if (!o) {
          return;
        }
        var a = o.content;
        var i = o.content = o.content.substring(0, t.start - o.loc.start.offset) + t.newText + o.content.substring(t.end - o.loc.start.offset);
        var s = new RegExp(`</\\s*${o.type}\\s*>`);
        if (!!a.match(s) != !!i.match(s)) {
          return;
        }
        var n = t.newText.length - (t.end - t.start);
        for (var f of r) {
          if (f.loc.start.offset > t.end) {
            f.loc.start.offset += n;
          }
          if (f.loc.end.offset >= t.end) {
            f.loc.end.offset += n;
          }
        }
        return e;
      }
    });
  }
  var a = e.ScriptSnapshot.fromString(t.getFullText());
  var d = new i(t.fileName, "vue", a, n, f, ...[ e, !1 ]);
  for (var u of forEachEmbeddedCode(d)) {
    if (u.id.startsWith("script_")) {
      return u;
    }
  }
};
//# sourceMappingURL=vue-chunk.js.map
