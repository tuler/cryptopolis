import e from "typescript";

import * as i from "node:path";

import { loadRef as a } from "@gql.tada/internal";

import { getGraphQLDiagnostics as r } from "@0no-co/graphqlsp/api";

import { e as n, p as t } from "./index-chunk.mjs";

var o = n((async function* _runDiagnostics(n) {
  var o = i.dirname(n.configPath);
  var l = t(n);
  var s = l.createExternalFiles();
  if (s.length) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
    await l.addVirtualFiles(s);
  }
  var g = await a(n.pluginConfig).load({
    rootPath: o
  });
  var f = l.build();
  var m = f.buildPluginInfo(n.pluginConfig);
  var d = f.getSourceFiles();
  yield {
    kind: "FILE_COUNT",
    fileCount: d.length
  };
  for (var c of d) {
    var p = c.fileName;
    var u = r(p, g, m);
    var v = [];
    if (u && u.length) {
      for (var h of u) {
        if (!("messageText" in h) || "string" != typeof h.messageText || !h.file) {
          continue;
        }
        var y = "info";
        if (h.category === e.DiagnosticCategory.Error) {
          y = "error";
        } else if (h.category === e.DiagnosticCategory.Warning) {
          y = "warn";
        }
        var C = f.getSourcePosition(c, {
          start: h.start || 1,
          length: h.length || 1
        });
        p = C.fileName;
        v.push({
          severity: y,
          message: h.messageText,
          file: C.fileName,
          line: C.line,
          col: C.col,
          endLine: C.endLine,
          endColumn: C.endColumn
        });
      }
    }
    yield {
      kind: "FILE_DIAGNOSTICS",
      filePath: p,
      messages: v
    };
  }
}));

export { o as runDiagnostics };
//# sourceMappingURL=thread-chunk3.mjs.map
