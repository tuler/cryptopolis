import e from "typescript";

import { getSchemaNamesFromConfig as i } from "@gql.tada/internal";

import { findAllPersistedCallExpressions as n, getDocumentReferenceFromDocumentNode as r, getDocumentReferenceFromTypeQuery as t, unrollTadaFragments as a } from "@0no-co/graphqlsp/api";

import { e as o, p as l } from "./index-chunk.mjs";

class GraphQLError extends Error {
  constructor(e, i, n, r, t, a, o) {
    super(e);
    this.name = "GraphQLError";
    this.message = e;
    if (t) {
      this.path = t;
    }
    if (i) {
      this.nodes = Array.isArray(i) ? i : [ i ];
    }
    if (n) {
      this.source = n;
    }
    if (r) {
      this.positions = r;
    }
    if (a) {
      this.originalError = a;
    }
    var l = o;
    if (!l && a) {
      var s = a.extensions;
      if (s && "object" == typeof s) {
        l = s;
      }
    }
    this.extensions = l || {};
  }
  toJSON() {
    return {
      ...this,
      message: this.message
    };
  }
  toString() {
    return this.message;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
}

var s;

var u;

function error(e) {
  return new GraphQLError(`Syntax Error: Unexpected token at ${u} in ${e}`);
}

function advance(e) {
  e.lastIndex = u;
  if (e.test(s)) {
    return s.slice(u, u = e.lastIndex);
  }
}

var d = / +(?=[^\s])/y;

function blockString(e) {
  var i = e.split("\n");
  var n = "";
  var r = 0;
  var t = 0;
  var a = i.length - 1;
  for (var o = 0; o < i.length; o++) {
    d.lastIndex = 0;
    if (d.test(i[o])) {
      if (o && (!r || d.lastIndex < r)) {
        r = d.lastIndex;
      }
      t = t || o;
      a = o;
    }
  }
  for (var l = t; l <= a; l++) {
    if (l !== t) {
      n += "\n";
    }
    n += i[l].slice(r).replace(/\\"""/g, '"""');
  }
  return n;
}

function ignored() {
  for (var e = 0 | s.charCodeAt(u++); 9 === e || 10 === e || 13 === e || 32 === e || 35 === e || 44 === e || 65279 === e; e = 0 | s.charCodeAt(u++)) {
    if (35 === e) {
      while (10 !== (e = s.charCodeAt(u++)) && 13 !== e) {}
    }
  }
  u--;
}

var c = /[_A-Za-z]\w*/y;

var v = new RegExp("(?:(null|true|false)|\\$(" + c.source + ')|(-?\\d+)((?:\\.\\d+)?[eE][+-]?\\d+|\\.\\d+)?|("""(?:"""|(?:[\\s\\S]*?[^\\\\])"""))|("(?:"|[^\\r\\n]*?[^\\\\]"))|(' + c.source + "))", "y");

var f = function(e) {
  e[e.Const = 1] = "Const";
  e[e.Var = 2] = "Var";
  e[e.Int = 3] = "Int";
  e[e.Float = 4] = "Float";
  e[e.BlockString = 5] = "BlockString";
  e[e.String = 6] = "String";
  e[e.Enum = 7] = "Enum";
  return e;
}(f || {});

var g = /\\/g;

function value(e) {
  var i;
  var n;
  v.lastIndex = u;
  if (91 === s.charCodeAt(u)) {
    u++;
    ignored();
    var r = [];
    while (93 !== s.charCodeAt(u)) {
      r.push(value(e));
    }
    u++;
    ignored();
    return {
      kind: "ListValue",
      values: r
    };
  } else if (123 === s.charCodeAt(u)) {
    u++;
    ignored();
    var t = [];
    while (125 !== s.charCodeAt(u)) {
      if (null == (i = advance(c))) {
        throw error("ObjectField");
      }
      ignored();
      if (58 !== s.charCodeAt(u++)) {
        throw error("ObjectField");
      }
      ignored();
      t.push({
        kind: "ObjectField",
        name: {
          kind: "Name",
          value: i
        },
        value: value(e)
      });
    }
    u++;
    ignored();
    return {
      kind: "ObjectValue",
      fields: t
    };
  } else if (null != (n = v.exec(s))) {
    u = v.lastIndex;
    ignored();
    if (null != (i = n[f.Const])) {
      return "null" === i ? {
        kind: "NullValue"
      } : {
        kind: "BooleanValue",
        value: "true" === i
      };
    } else if (null != (i = n[f.Var])) {
      if (e) {
        throw error("Variable");
      } else {
        return {
          kind: "Variable",
          name: {
            kind: "Name",
            value: i
          }
        };
      }
    } else if (null != (i = n[f.Int])) {
      var a;
      if (null != (a = n[f.Float])) {
        return {
          kind: "FloatValue",
          value: i + a
        };
      } else {
        return {
          kind: "IntValue",
          value: i
        };
      }
    } else if (null != (i = n[f.BlockString])) {
      return {
        kind: "StringValue",
        value: blockString(i.slice(3, -3)),
        block: !0
      };
    } else if (null != (i = n[f.String])) {
      return {
        kind: "StringValue",
        value: g.test(i) ? JSON.parse(i) : i.slice(1, -1),
        block: !1
      };
    } else if (null != (i = n[f.Enum])) {
      return {
        kind: "EnumValue",
        value: i
      };
    }
  }
  throw error("Value");
}

function arguments_(e) {
  if (40 === s.charCodeAt(u)) {
    var i = [];
    u++;
    ignored();
    var n;
    do {
      if (null == (n = advance(c))) {
        throw error("Argument");
      }
      ignored();
      if (58 !== s.charCodeAt(u++)) {
        throw error("Argument");
      }
      ignored();
      i.push({
        kind: "Argument",
        name: {
          kind: "Name",
          value: n
        },
        value: value(e)
      });
    } while (41 !== s.charCodeAt(u));
    u++;
    ignored();
    return i;
  }
}

function directives(e) {
  if (64 === s.charCodeAt(u)) {
    var i = [];
    var n;
    do {
      u++;
      if (null == (n = advance(c))) {
        throw error("Directive");
      }
      ignored();
      i.push({
        kind: "Directive",
        name: {
          kind: "Name",
          value: n
        },
        arguments: arguments_(e)
      });
    } while (64 === s.charCodeAt(u));
    return i;
  }
}

function type() {
  var e;
  var i = 0;
  while (91 === s.charCodeAt(u)) {
    i++;
    u++;
    ignored();
  }
  if (null == (e = advance(c))) {
    throw error("NamedType");
  }
  ignored();
  var n = {
    kind: "NamedType",
    name: {
      kind: "Name",
      value: e
    }
  };
  do {
    if (33 === s.charCodeAt(u)) {
      u++;
      ignored();
      n = {
        kind: "NonNullType",
        type: n
      };
    }
    if (i) {
      if (93 !== s.charCodeAt(u++)) {
        throw error("NamedType");
      }
      ignored();
      n = {
        kind: "ListType",
        type: n
      };
    }
  } while (i--);
  return n;
}

var m = new RegExp("(?:(\\.{3})|(" + c.source + "))", "y");

var h = function(e) {
  e[e.Spread = 1] = "Spread";
  e[e.Name = 2] = "Name";
  return e;
}(h || {});

function selectionSet() {
  var e = [];
  var i;
  var n;
  do {
    m.lastIndex = u;
    if (null != (n = m.exec(s))) {
      u = m.lastIndex;
      if (null != n[h.Spread]) {
        ignored();
        var r = advance(c);
        if (null != r && "on" !== r) {
          ignored();
          e.push({
            kind: "FragmentSpread",
            name: {
              kind: "Name",
              value: r
            },
            directives: directives(!1)
          });
        } else {
          ignored();
          if ("on" === r) {
            if (null == (r = advance(c))) {
              throw error("NamedType");
            }
            ignored();
          }
          var t = directives(!1);
          if (123 !== s.charCodeAt(u++)) {
            throw error("InlineFragment");
          }
          ignored();
          e.push({
            kind: "InlineFragment",
            typeCondition: r ? {
              kind: "NamedType",
              name: {
                kind: "Name",
                value: r
              }
            } : void 0,
            directives: t,
            selectionSet: selectionSet()
          });
        }
      } else if (null != (i = n[h.Name])) {
        var a = void 0;
        ignored();
        if (58 === s.charCodeAt(u)) {
          u++;
          ignored();
          a = i;
          if (null == (i = advance(c))) {
            throw error("Field");
          }
          ignored();
        }
        var o = arguments_(!1);
        ignored();
        var l = directives(!1);
        var d = void 0;
        if (123 === s.charCodeAt(u)) {
          u++;
          ignored();
          d = selectionSet();
        }
        e.push({
          kind: "Field",
          alias: a ? {
            kind: "Name",
            value: a
          } : void 0,
          name: {
            kind: "Name",
            value: i
          },
          arguments: o,
          directives: l,
          selectionSet: d
        });
      }
    } else {
      throw error("SelectionSet");
    }
  } while (125 !== s.charCodeAt(u));
  u++;
  ignored();
  return {
    kind: "SelectionSet",
    selections: e
  };
}

function fragmentDefinition() {
  var e;
  var i;
  if (null == (e = advance(c))) {
    throw error("FragmentDefinition");
  }
  ignored();
  if ("on" !== advance(c)) {
    throw error("FragmentDefinition");
  }
  ignored();
  if (null == (i = advance(c))) {
    throw error("FragmentDefinition");
  }
  ignored();
  var n = directives(!1);
  if (123 !== s.charCodeAt(u++)) {
    throw error("FragmentDefinition");
  }
  ignored();
  return {
    kind: "FragmentDefinition",
    name: {
      kind: "Name",
      value: e
    },
    typeCondition: {
      kind: "NamedType",
      name: {
        kind: "Name",
        value: i
      }
    },
    directives: n,
    selectionSet: selectionSet()
  };
}

var p = /(?:query|mutation|subscription|fragment)/y;

function operationDefinition(e) {
  var i;
  var n;
  var r;
  if (e) {
    ignored();
    i = advance(c);
    n = function variableDefinitions() {
      ignored();
      if (40 === s.charCodeAt(u)) {
        var e = [];
        u++;
        ignored();
        var i;
        do {
          if (36 !== s.charCodeAt(u++)) {
            throw error("Variable");
          }
          if (null == (i = advance(c))) {
            throw error("Variable");
          }
          ignored();
          if (58 !== s.charCodeAt(u++)) {
            throw error("VariableDefinition");
          }
          ignored();
          var n = type();
          var r = void 0;
          if (61 === s.charCodeAt(u)) {
            u++;
            ignored();
            r = value(!0);
          }
          ignored();
          e.push({
            kind: "VariableDefinition",
            variable: {
              kind: "Variable",
              name: {
                kind: "Name",
                value: i
              }
            },
            type: n,
            defaultValue: r,
            directives: directives(!0)
          });
        } while (41 !== s.charCodeAt(u));
        u++;
        ignored();
        return e;
      }
    }();
    r = directives(!1);
  }
  if (123 === s.charCodeAt(u)) {
    u++;
    ignored();
    return {
      kind: "OperationDefinition",
      operation: e || "query",
      name: i ? {
        kind: "Name",
        value: i
      } : void 0,
      variableDefinitions: n,
      directives: r,
      selectionSet: selectionSet()
    };
  }
}

function parse(e, i) {
  s = "string" == typeof e.body ? e.body : e;
  u = 0;
  return function document() {
    var e;
    var i;
    ignored();
    var n = [];
    do {
      if ("fragment" === (e = advance(p))) {
        ignored();
        n.push(fragmentDefinition());
      } else if (null != (i = operationDefinition(e))) {
        n.push(i);
      } else {
        throw error("Document");
      }
    } while (u < s.length);
    return {
      kind: "Document",
      definitions: n
    };
  }();
}

function mapJoin(e, i, n) {
  var r = "";
  for (var t = 0; t < e.length; t++) {
    if (t) {
      r += i;
    }
    r += n(e[t]);
  }
  return r;
}

var S = "\n";

var k = {
  OperationDefinition(e) {
    var i = e.operation;
    if (e.name) {
      i += " " + e.name.value;
    }
    if (e.variableDefinitions && e.variableDefinitions.length) {
      if (!e.name) {
        i += " ";
      }
      i += "(" + mapJoin(e.variableDefinitions, ", ", k.VariableDefinition) + ")";
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", k.Directive);
    }
    return "query" !== i ? i + " " + k.SelectionSet(e.selectionSet) : k.SelectionSet(e.selectionSet);
  },
  VariableDefinition(e) {
    var i = k.Variable(e.variable) + ": " + _print(e.type);
    if (e.defaultValue) {
      i += " = " + _print(e.defaultValue);
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", k.Directive);
    }
    return i;
  },
  Field(e) {
    var i = e.alias ? e.alias.value + ": " + e.name.value : e.name.value;
    if (e.arguments && e.arguments.length) {
      var n = mapJoin(e.arguments, ", ", k.Argument);
      if (i.length + n.length + 2 > 80) {
        i += "(" + (S += "  ") + mapJoin(e.arguments, S, k.Argument) + (S = S.slice(0, -2)) + ")";
      } else {
        i += "(" + n + ")";
      }
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", k.Directive);
    }
    if (e.selectionSet) {
      i += " " + k.SelectionSet(e.selectionSet);
    }
    return i;
  },
  StringValue(e) {
    if (e.block) {
      return function printBlockString(e) {
        return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
      }(e.value).replace(/\n/g, S);
    } else {
      return function printString(e) {
        return JSON.stringify(e);
      }(e.value);
    }
  },
  BooleanValue: e => "" + e.value,
  NullValue: e => "null",
  IntValue: e => e.value,
  FloatValue: e => e.value,
  EnumValue: e => e.value,
  Name: e => e.value,
  Variable: e => "$" + e.name.value,
  ListValue: e => "[" + mapJoin(e.values, ", ", _print) + "]",
  ObjectValue: e => "{" + mapJoin(e.fields, ", ", k.ObjectField) + "}",
  ObjectField: e => e.name.value + ": " + _print(e.value),
  Document(e) {
    if (!e.definitions || !e.definitions.length) {
      return "";
    }
    return mapJoin(e.definitions, "\n\n", _print);
  },
  SelectionSet: e => "{" + (S += "  ") + mapJoin(e.selections, S, _print) + (S = S.slice(0, -2)) + "}",
  Argument: e => e.name.value + ": " + _print(e.value),
  FragmentSpread(e) {
    var i = "..." + e.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", k.Directive);
    }
    return i;
  },
  InlineFragment(e) {
    var i = "...";
    if (e.typeCondition) {
      i += " on " + e.typeCondition.name.value;
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", k.Directive);
    }
    return i + " " + k.SelectionSet(e.selectionSet);
  },
  FragmentDefinition(e) {
    var i = "fragment " + e.name.value;
    i += " on " + e.typeCondition.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", k.Directive);
    }
    return i + " " + k.SelectionSet(e.selectionSet);
  },
  Directive(e) {
    var i = "@" + e.name.value;
    if (e.arguments && e.arguments.length) {
      i += "(" + mapJoin(e.arguments, ", ", k.Argument) + ")";
    }
    return i;
  },
  NamedType: e => e.name.value,
  ListType: e => "[" + _print(e.type) + "]",
  NonNullType: e => _print(e.type) + "!"
};

var _print = e => k[e.kind](e);

function print(e) {
  S = "\n";
  return k[e.kind] ? k[e.kind](e) : "";
}

var y = o((async function* _runPersisted(o) {
  var s = i(o.pluginConfig);
  var u = l(o);
  var d = u.createExternalFiles();
  if (d.length) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
    await u.addVirtualFiles(d);
  }
  var c = u.build();
  var v = c.buildPluginInfo(o.pluginConfig);
  var f = c.getSourceFiles();
  yield {
    kind: "FILE_COUNT",
    fileCount: f.length
  };
  for (var g of f) {
    var m = g.fileName;
    var h = [];
    var p = [];
    var S = n(g, v);
    for (var k of S) {
      var y = c.getSourcePosition(g, k.node.getStart());
      m = y.fileName;
      if (!s.has(k.schema)) {
        p.push({
          message: k.schema ? `The '${k.schema}' schema is not in the configuration but was referenced by "graphql.persisted".` : s.size > 1 ? "The document is not for a known schema. Have you re-generated the output file?" : "Multiple schemas are configured, but the document is not for a specific schema.",
          file: y.fileName,
          line: y.line,
          col: y.col
        });
        continue;
      }
      var N = k.node.arguments[0];
      var b = k.node.arguments[1];
      var C = k.node.typeArguments && k.node.typeArguments[0];
      if (!N || !e.isStringLiteral(N)) {
        p.push({
          message: '"graphql.persisted" must be called with a string literal as the first argument.',
          file: y.fileName,
          line: y.line,
          col: y.col
        });
        continue;
      } else if (!b && !C) {
        p.push({
          message: '"graphql.persisted" is missing a document.\nThis may be passed as a generic such as `graphql.persisted<typeof document>` or as the second argument.',
          file: y.fileName,
          line: y.line,
          col: y.col
        });
        continue;
      }
      var A = null;
      var w = k.node;
      if (b && (e.isCallExpression(b) || e.isIdentifier(b))) {
        A = r(b, g.fileName, v).node;
        w = b;
      } else if (C && e.isTypeQueryNode(C)) {
        A = t(C, g.fileName, v).node;
        w = C;
      }
      if (!A) {
        p.push({
          message: `Could not find reference for "${w.getText()}".\nIf this is unexpected, please file an issue describing your case.`,
          file: y.fileName,
          line: y.line,
          col: y.col
        });
        continue;
      }
      if (!A || !e.isCallExpression(A) || !e.isNoSubstitutionTemplateLiteral(A.arguments[0]) && !e.isStringLiteral(A.arguments[0])) {
        p.push({
          message: `The referenced document of "${w.getText()}" contains no document string literal.\nIf this is unexpected, please file an issue describing your case.`,
          file: y.fileName,
          line: y.line,
          col: y.col
        });
        continue;
      }
      var V = [];
      var D = A.arguments[0].getText().slice(1, -1);
      if (A.arguments[1] && e.isArrayLiteralExpression(A.arguments[1])) {
        a(A.arguments[1], V, c.buildPluginInfo(o.pluginConfig));
      }
      var x = new Set;
      var F = void 0;
      if (o.disableNormalization) {
        F = D;
      } else {
        try {
          F = print(parse(D));
        } catch (e) {
          p.push({
            message: `The referenced document of "${w.getText()}" could not be parsed.\nRun \`check\` to see specific validation errors.`,
            file: y.fileName,
            line: y.line,
            col: y.col
          });
          continue;
        }
      }
      for (var T of V) {
        var I = print(T);
        if (!x.has(I)) {
          F += "\n\n" + print(T);
          x.add(I);
        }
      }
      h.push({
        schemaName: k.schema,
        hashKey: N.getText().slice(1, -1),
        document: F
      });
    }
    yield {
      kind: "FILE_PERSISTED",
      filePath: m,
      documents: h,
      warnings: p
    };
  }
}));

export { y as runPersisted };
//# sourceMappingURL=thread-chunk.mjs.map
