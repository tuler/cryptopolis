import e from "typescript";

import * as t from "@vue/compiler-dom";

import * as r from "@vue/language-core";

import { parse as o } from "@vue/language-core";

function* forEachEmbeddedCode(e) {
  yield e;
  if (e.embeddedCodes) {
    for (var t of e.embeddedCodes) {
      yield* forEachEmbeddedCode(t);
    }
  }
}

var s;

if ("VueVirtualCode" in r) {
  s = r.VueVirtualCode;
} else if ("VueGeneratedCode" in r) {
  s = r.VueGeneratedCode;
}

var i;

if ("getBasePlugins" in r) {
  i = r.getBasePlugins;
} else if ("getDefaultVueLanguagePlugins" in r) {
  i = r.getDefaultVueLanguagePlugins;
}

var a = r.resolveVueCompilerOptions({});

var n;

var transform = r => {
  if (!s || !i) {
    return;
  } else if (!n) {
    (n = i({
      modules: {
        typescript: e,
        "@vue/compiler-dom": t
      },
      compilerOptions: {},
      globalTypesHolder: void 0,
      vueCompilerOptions: a
    })).push({
      version: 2,
      parseSFC: (e, t) => o(t),
      updateSFC(e, t) {
        var r = [ e.descriptor.template, e.descriptor.script, e.descriptor.scriptSetup, ...e.descriptor.styles, ...e.descriptor.customBlocks ].filter((e => !!e));
        var o = r.find((e => t.start >= e.loc.start.offset && t.end <= e.loc.end.offset));
        if (!o) {
          return;
        }
        var s = o.content;
        var i = o.content = o.content.substring(0, t.start - o.loc.start.offset) + t.newText + o.content.substring(t.end - o.loc.start.offset);
        var a = new RegExp(`</\\s*${o.type}\\s*>`);
        if (!!s.match(a) != !!i.match(a)) {
          return;
        }
        var n = t.newText.length - (t.end - t.start);
        for (var d of r) {
          if (d.loc.start.offset > t.end) {
            d.loc.start.offset += n;
          }
          if (d.loc.end.offset >= t.end) {
            d.loc.end.offset += n;
          }
        }
        return e;
      }
    });
  }
  var d = e.ScriptSnapshot.fromString(r.getFullText());
  var f = new s(r.fileName, "vue", d, a, n, ...[ e, !1 ]);
  for (var l of forEachEmbeddedCode(f)) {
    if (l.id.startsWith("script_")) {
      return l;
    }
  }
};

export { transform };
//# sourceMappingURL=vue-chunk.mjs.map
