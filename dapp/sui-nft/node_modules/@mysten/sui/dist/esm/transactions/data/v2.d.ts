import type { EnumInputShape } from '@mysten/bcs';
import type { BaseSchema, Output } from 'valibot';
export declare const SerializedTransactionDataV2: import("valibot").ObjectSchema<{
    version: import("valibot").LiteralSchema<2, 2>;
    sender: import("valibot").NullishSchema<import("valibot").SchemaWithTransform<import("valibot").StringSchema<string>, string>, undefined, string | null | undefined>;
    expiration: import("valibot").NullishSchema<BaseSchema<EnumInputShape<{
        None: true;
        Epoch: string | number;
    }>>, undefined, EnumInputShape<{
        None: true;
        Epoch: string | number;
    }> | null | undefined>;
    gasData: import("valibot").ObjectSchema<{
        budget: import("valibot").NullableSchema<import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").NumberSchema<number>)[], string | number>, undefined, string | number | null>;
        price: import("valibot").NullableSchema<import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").NumberSchema<number>)[], string | number>, undefined, string | number | null>;
        owner: import("valibot").NullableSchema<import("valibot").SchemaWithTransform<import("valibot").StringSchema<string>, string>, undefined, string | null>;
        payment: import("valibot").NullableSchema<import("valibot").ArraySchema<import("valibot").ObjectSchema<{
            objectId: import("valibot").SchemaWithTransform<import("valibot").StringSchema<string>, string>;
            version: import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").NumberSchema<number>)[], string | number>;
            digest: import("valibot").StringSchema<string>;
        }, undefined, {
            objectId: string;
            version: string | number;
            digest: string;
        }>, {
            objectId: string;
            version: string | number;
            digest: string;
        }[]>, undefined, {
            objectId: string;
            version: string | number;
            digest: string;
        }[] | null>;
    }, undefined, {
        payment: {
            objectId: string;
            version: string | number;
            digest: string;
        }[] | null;
        owner: string | null;
        price: string | number | null;
        budget: string | number | null;
    }>;
    inputs: import("valibot").ArraySchema<BaseSchema<EnumInputShape<{
        Object: EnumInputShape<{
            ImmOrOwnedObject: {
                objectId: string;
                version: string | number;
                digest: string;
            };
            SharedObject: {
                objectId: string;
                initialSharedVersion: string | number;
                mutable: boolean;
            };
            Receiving: {
                objectId: string;
                version: string | number;
                digest: string;
            };
        }>;
        Pure: {
            bytes: string;
        };
        UnresolvedPure: {
            value: unknown;
        };
        UnresolvedObject: {
            objectId: string;
            version?: string | number | null | undefined;
            digest?: string | null | undefined;
            initialSharedVersion?: string | number | null | undefined;
        };
    }>>, EnumInputShape<{
        Object: EnumInputShape<{
            ImmOrOwnedObject: {
                objectId: string;
                version: string | number;
                digest: string;
            };
            SharedObject: {
                objectId: string;
                initialSharedVersion: string | number;
                mutable: boolean;
            };
            Receiving: {
                objectId: string;
                version: string | number;
                digest: string;
            };
        }>;
        Pure: {
            bytes: string;
        };
        UnresolvedPure: {
            value: unknown;
        };
        UnresolvedObject: {
            objectId: string;
            version?: string | number | null | undefined;
            digest?: string | null | undefined;
            initialSharedVersion?: string | number | null | undefined;
        };
    }>[]>;
    commands: import("valibot").ArraySchema<BaseSchema<EnumInputShape<{
        MoveCall: {
            function: string;
            module: string;
            package: string;
            typeArguments: string[];
            arguments: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        TransferObjects: {
            address: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            objects: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        SplitCoins: {
            coin: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            amounts: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        MergeCoins: {
            destination: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            sources: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        Publish: {
            modules: string[];
            dependencies: string[];
        };
        MakeMoveVec: {
            type: string | null;
            elements: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        Upgrade: {
            package: string;
            modules: string[];
            dependencies: string[];
            ticket: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
        };
        $Intent: {
            name: string;
            inputs: {
                [x: string]: EnumInputShape<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }> | EnumInputShape<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }>[];
            };
            data: {
                [x: string]: unknown;
            };
        };
    }>>, EnumInputShape<{
        MoveCall: {
            function: string;
            module: string;
            package: string;
            typeArguments: string[];
            arguments: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        TransferObjects: {
            address: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            objects: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        SplitCoins: {
            coin: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            amounts: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        MergeCoins: {
            destination: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            sources: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        Publish: {
            modules: string[];
            dependencies: string[];
        };
        MakeMoveVec: {
            type: string | null;
            elements: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        Upgrade: {
            package: string;
            modules: string[];
            dependencies: string[];
            ticket: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
        };
        $Intent: {
            name: string;
            inputs: {
                [x: string]: EnumInputShape<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }> | EnumInputShape<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }>[];
            };
            data: {
                [x: string]: unknown;
            };
        };
    }>[]>;
}, undefined, {
    version: 2;
    inputs: EnumInputShape<{
        Object: EnumInputShape<{
            ImmOrOwnedObject: {
                objectId: string;
                version: string | number;
                digest: string;
            };
            SharedObject: {
                objectId: string;
                initialSharedVersion: string | number;
                mutable: boolean;
            };
            Receiving: {
                objectId: string;
                version: string | number;
                digest: string;
            };
        }>;
        Pure: {
            bytes: string;
        };
        UnresolvedPure: {
            value: unknown;
        };
        UnresolvedObject: {
            objectId: string;
            version?: string | number | null | undefined;
            digest?: string | null | undefined;
            initialSharedVersion?: string | number | null | undefined;
        };
    }>[];
    commands: EnumInputShape<{
        MoveCall: {
            function: string;
            module: string;
            package: string;
            typeArguments: string[];
            arguments: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        TransferObjects: {
            address: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            objects: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        SplitCoins: {
            coin: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            amounts: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        MergeCoins: {
            destination: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
            sources: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        Publish: {
            modules: string[];
            dependencies: string[];
        };
        MakeMoveVec: {
            type: string | null;
            elements: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>[];
        };
        Upgrade: {
            package: string;
            modules: string[];
            dependencies: string[];
            ticket: EnumInputShape<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }>;
        };
        $Intent: {
            name: string;
            inputs: {
                [x: string]: EnumInputShape<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }> | EnumInputShape<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }>[];
            };
            data: {
                [x: string]: unknown;
            };
        };
    }>[];
    sender: string | null | undefined;
    gasData: {
        payment: {
            objectId: string;
            version: string | number;
            digest: string;
        }[] | null;
        owner: string | null;
        price: string | number | null;
        budget: string | number | null;
    };
    expiration: EnumInputShape<{
        None: true;
        Epoch: string | number;
    }> | null | undefined;
}>;
export type SerializedTransactionDataV2 = Output<typeof SerializedTransactionDataV2>;
