import type { SuiClient } from '../../client/index.js';
import type { Signer } from '../../cryptography/index.js';
import type { ObjectCacheOptions } from '../ObjectCache.js';
import { Transaction } from '../Transaction.js';
export interface ParallelTransactionExecutorOptions extends Omit<ObjectCacheOptions, 'address'> {
    client: SuiClient;
    signer: Signer;
    coinBatchSize?: number;
    initialCoinBalance?: bigint;
    minimumCoinBalance?: bigint;
    maxPoolSize?: number;
    sourceCoins?: string[];
}
export declare class ParallelTransactionExecutor {
    #private;
    constructor(options: ParallelTransactionExecutorOptions);
    resetCache(): Promise<void>;
    executeTransaction(transaction: Transaction): Promise<{
        digest: string;
        effects: string;
    }>;
}
