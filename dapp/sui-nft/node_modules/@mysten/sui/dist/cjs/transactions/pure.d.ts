import type { SerializedBcs } from '@mysten/bcs';
import type { Argument } from './data/internal.js';
export declare function createPure(makePure: (value: SerializedBcs<any, any> | Uint8Array) => Argument): {
    (value: SerializedBcs<any, any> | Uint8Array): Argument;
    u8(value: number): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    u16(value: number): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    u32(value: number): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    u64(value: bigint | number | string): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    u128(value: bigint | number | string): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    u256(value: bigint | number | string): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    bool(value: boolean): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    string(value: string): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    address(value: string): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    id: (value: string) => {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure" | undefined;
    } | {
        $kind: "Input";
        Input: number;
        type?: "object" | undefined;
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
};
