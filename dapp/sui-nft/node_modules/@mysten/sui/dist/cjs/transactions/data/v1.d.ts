import type { BaseSchema, Output } from 'valibot';
import type { StructTag as StructTagType, TypeTag as TypeTagType } from '../../bcs/types.js';
import { TransactionData } from './internal.js';
export declare const ObjectRef: import("valibot").ObjectSchema<{
    digest: import("valibot").StringSchema<string>;
    objectId: import("valibot").StringSchema<string>;
    version: import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").NumberSchema<number> | import("valibot").BigintSchema<bigint>)[], string | number | bigint>;
}, undefined, {
    objectId: string;
    version: string | number | bigint;
    digest: string;
}>;
export declare const NormalizedCallArg: {
    async: false;
    _parse(input: unknown, info?: Partial<Pick<import("valibot").Issue, "origin" | "abortEarly" | "abortPipeEarly" | "skipPipe">> | undefined): import("valibot").SchemaResult<import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Object: import("@mysten/bcs").EnumOutputShapeWithKeys<{
            ImmOrOwned: {
                objectId: string;
                version: string | number | bigint;
                digest: string;
            };
            Shared: {
                objectId: string;
                initialSharedVersion: string | number;
                mutable: boolean;
            };
            Receiving: {
                objectId: string;
                version: string | number | bigint;
                digest: string;
            };
        }, "Receiving" | "Shared" | "ImmOrOwned">;
        Pure: number[];
    }, "Pure" | "Object">>;
    _types?: {
        input: import("@mysten/bcs").EnumInputShape<{
            Object: import("@mysten/bcs").EnumInputShape<{
                ImmOrOwned: {
                    objectId: string;
                    version: string | number | bigint;
                    digest: string;
                };
                Shared: {
                    objectId: string;
                    initialSharedVersion: string | number;
                    mutable: boolean;
                };
                Receiving: {
                    objectId: string;
                    version: string | number | bigint;
                    digest: string;
                };
            }>;
            Pure: number[];
        }>;
        output: import("@mysten/bcs").EnumOutputShapeWithKeys<{
            Object: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                ImmOrOwned: {
                    objectId: string;
                    version: string | number | bigint;
                    digest: string;
                };
                Shared: {
                    objectId: string;
                    initialSharedVersion: string | number;
                    mutable: boolean;
                };
                Receiving: {
                    objectId: string;
                    version: string | number | bigint;
                    digest: string;
                };
            }, "Receiving" | "Shared" | "ImmOrOwned">;
            Pure: number[];
        }, "Pure" | "Object">;
    } | undefined;
};
export declare const TypeTag: BaseSchema<TypeTagType>;
export declare const StructTag: BaseSchema<StructTagType>;
export declare const TransactionArgument: import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
    kind: import("valibot").LiteralSchema<"Input", "Input">;
    index: import("valibot").NumberSchema<number>;
    value: import("valibot").UnknownSchema<unknown>;
    type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
}, undefined, {
    kind: "Input";
    value: unknown;
    index: number;
    type?: "object" | undefined;
}> | import("valibot").ObjectSchema<{
    kind: import("valibot").LiteralSchema<"Input", "Input">;
    index: import("valibot").NumberSchema<number>;
    value: import("valibot").UnknownSchema<unknown>;
    type: import("valibot").LiteralSchema<"pure", "pure">;
}, undefined, {
    type: "pure";
    kind: "Input";
    value: unknown;
    index: number;
}>)[], {
    kind: "Input";
    value: unknown;
    index: number;
    type?: "object" | undefined;
} | {
    type: "pure";
    kind: "Input";
    value: unknown;
    index: number;
}> | import("valibot").ObjectSchema<{
    kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
}, undefined, {
    kind: "GasCoin";
}> | import("valibot").ObjectSchema<{
    kind: import("valibot").LiteralSchema<"Result", "Result">;
    index: import("valibot").NumberSchema<number>;
}, undefined, {
    kind: "Result";
    index: number;
}> | import("valibot").ObjectSchema<{
    kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
    index: import("valibot").NumberSchema<number>;
    resultIndex: import("valibot").NumberSchema<number>;
}, undefined, {
    kind: "NestedResult";
    index: number;
    resultIndex: number;
}>)[], {
    kind: "Input";
    value: unknown;
    index: number;
    type?: "object" | undefined;
} | {
    type: "pure";
    kind: "Input";
    value: unknown;
    index: number;
} | {
    kind: "GasCoin";
} | {
    kind: "Result";
    index: number;
} | {
    kind: "NestedResult";
    index: number;
    resultIndex: number;
}>;
export declare const SerializedTransactionDataV1: import("valibot").ObjectSchema<{
    version: import("valibot").LiteralSchema<1, 1>;
    sender: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, undefined, string | undefined>;
    expiration: import("valibot").NullishSchema<import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
        Epoch: import("valibot").NumberSchema<number>;
    }, undefined, {
        Epoch: number;
    }> | import("valibot").ObjectSchema<{
        None: import("valibot").NullableSchema<import("valibot").LiteralSchema<true, true>, undefined, true | null>;
    }, undefined, {
        None: true | null;
    }>)[], {
        Epoch: number;
    } | {
        None: true | null;
    }>, undefined, {
        Epoch: number;
    } | {
        None: true | null;
    } | null | undefined>;
    gasConfig: import("valibot").ObjectSchema<{
        budget: import("valibot").OptionalSchema<import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").NumberSchema<number> | import("valibot").BigintSchema<bigint>)[], string | number | bigint>, undefined, string | number | bigint | undefined>;
        price: import("valibot").OptionalSchema<import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").NumberSchema<number> | import("valibot").BigintSchema<bigint>)[], string | number | bigint>, undefined, string | number | bigint | undefined>;
        payment: import("valibot").OptionalSchema<import("valibot").ArraySchema<import("valibot").ObjectSchema<{
            digest: import("valibot").StringSchema<string>;
            objectId: import("valibot").StringSchema<string>;
            version: import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").NumberSchema<number> | import("valibot").BigintSchema<bigint>)[], string | number | bigint>;
        }, undefined, {
            objectId: string;
            version: string | number | bigint;
            digest: string;
        }>, {
            objectId: string;
            version: string | number | bigint;
            digest: string;
        }[]>, undefined, {
            objectId: string;
            version: string | number | bigint;
            digest: string;
        }[] | undefined>;
        owner: import("valibot").OptionalSchema<import("valibot").StringSchema<string>, undefined, string | undefined>;
    }, undefined, {
        payment?: {
            objectId: string;
            version: string | number | bigint;
            digest: string;
        }[] | undefined;
        owner?: string | undefined;
        price?: string | number | bigint | undefined;
        budget?: string | number | bigint | undefined;
    }>;
    inputs: import("valibot").ArraySchema<import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"Input", "Input">;
        index: import("valibot").NumberSchema<number>;
        value: import("valibot").UnknownSchema<unknown>;
        type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
    }, undefined, {
        kind: "Input";
        value: unknown;
        index: number;
        type?: "object" | undefined;
    }> | import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"Input", "Input">;
        index: import("valibot").NumberSchema<number>;
        value: import("valibot").UnknownSchema<unknown>;
        type: import("valibot").LiteralSchema<"pure", "pure">;
    }, undefined, {
        type: "pure";
        kind: "Input";
        value: unknown;
        index: number;
    }>)[], {
        kind: "Input";
        value: unknown;
        index: number;
        type?: "object" | undefined;
    } | {
        type: "pure";
        kind: "Input";
        value: unknown;
        index: number;
    }>, ({
        kind: "Input";
        value: unknown;
        index: number;
        type?: "object" | undefined;
    } | {
        type: "pure";
        kind: "Input";
        value: unknown;
        index: number;
    })[]>;
    transactions: import("valibot").ArraySchema<import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"MoveCall", "MoveCall">;
        target: BaseSchema<`${string}::${string}::${string}`>;
        typeArguments: import("valibot").ArraySchema<import("valibot").StringSchema<string>, string[]>;
        arguments: import("valibot").ArraySchema<import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>, ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[]>;
    }, undefined, {
        typeArguments: string[];
        arguments: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MoveCall";
        target: `${string}::${string}::${string}`;
    }> | import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"TransferObjects", "TransferObjects">;
        objects: import("valibot").ArraySchema<import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>, ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[]>;
        address: import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>;
    }, undefined, {
        address: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "TransferObjects";
    }> | import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"SplitCoins", "SplitCoins">;
        coin: import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>;
        amounts: import("valibot").ArraySchema<import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>, ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[]>;
    }, undefined, {
        coin: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        amounts: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "SplitCoins";
    }> | import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"MergeCoins", "MergeCoins">;
        destination: import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>;
        sources: import("valibot").ArraySchema<import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>, ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[]>;
    }, undefined, {
        destination: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        sources: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MergeCoins";
    }> | import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"MakeMoveVec", "MakeMoveVec">;
        type: import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            Some: BaseSchema<TypeTagType>;
        }, undefined, {
            Some: TypeTagType;
        }> | import("valibot").ObjectSchema<{
            None: import("valibot").NullableSchema<import("valibot").LiteralSchema<true, true>, undefined, true | null>;
        }, undefined, {
            None: true | null;
        }>)[], {
            Some: TypeTagType;
        } | {
            None: true | null;
        }>;
        objects: import("valibot").ArraySchema<import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>, ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[]>;
    }, undefined, {
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        type: {
            Some: TypeTagType;
        } | {
            None: true | null;
        };
        kind: "MakeMoveVec";
    }> | import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"Publish", "Publish">;
        modules: import("valibot").ArraySchema<import("valibot").ArraySchema<import("valibot").NumberSchema<number>, number[]>, number[][]>;
        dependencies: import("valibot").ArraySchema<import("valibot").StringSchema<string>, string[]>;
    }, undefined, {
        modules: number[][];
        dependencies: string[];
        kind: "Publish";
    }> | import("valibot").ObjectSchema<{
        kind: import("valibot").LiteralSchema<"Upgrade", "Upgrade">;
        modules: import("valibot").ArraySchema<import("valibot").ArraySchema<import("valibot").NumberSchema<number>, number[]>, number[][]>;
        dependencies: import("valibot").ArraySchema<import("valibot").StringSchema<string>, string[]>;
        packageId: import("valibot").StringSchema<string>;
        ticket: import("valibot").UnionSchema<(import("valibot").UnionSchema<(import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").OptionalSchema<import("valibot").LiteralSchema<"object", "object">, undefined, "object" | undefined>;
        }, undefined, {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Input", "Input">;
            index: import("valibot").NumberSchema<number>;
            value: import("valibot").UnknownSchema<unknown>;
            type: import("valibot").LiteralSchema<"pure", "pure">;
        }, undefined, {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"GasCoin", "GasCoin">;
        }, undefined, {
            kind: "GasCoin";
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"Result", "Result">;
            index: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "Result";
            index: number;
        }> | import("valibot").ObjectSchema<{
            kind: import("valibot").LiteralSchema<"NestedResult", "NestedResult">;
            index: import("valibot").NumberSchema<number>;
            resultIndex: import("valibot").NumberSchema<number>;
        }, undefined, {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>)[], {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        }>;
    }, undefined, {
        modules: number[][];
        dependencies: string[];
        ticket: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        kind: "Upgrade";
        packageId: string;
    }>)[], {
        typeArguments: string[];
        arguments: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MoveCall";
        target: `${string}::${string}::${string}`;
    } | {
        address: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "TransferObjects";
    } | {
        coin: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        amounts: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "SplitCoins";
    } | {
        destination: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        sources: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MergeCoins";
    } | {
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        type: {
            Some: TypeTagType;
        } | {
            None: true | null;
        };
        kind: "MakeMoveVec";
    } | {
        modules: number[][];
        dependencies: string[];
        kind: "Publish";
    } | {
        modules: number[][];
        dependencies: string[];
        ticket: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        kind: "Upgrade";
        packageId: string;
    }>, ({
        typeArguments: string[];
        arguments: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MoveCall";
        target: `${string}::${string}::${string}`;
    } | {
        address: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "TransferObjects";
    } | {
        coin: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        amounts: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "SplitCoins";
    } | {
        destination: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        sources: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MergeCoins";
    } | {
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        type: {
            Some: TypeTagType;
        } | {
            None: true | null;
        };
        kind: "MakeMoveVec";
    } | {
        modules: number[][];
        dependencies: string[];
        kind: "Publish";
    } | {
        modules: number[][];
        dependencies: string[];
        ticket: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        kind: "Upgrade";
        packageId: string;
    })[]>;
}, undefined, {
    version: 1;
    inputs: ({
        kind: "Input";
        value: unknown;
        index: number;
        type?: "object" | undefined;
    } | {
        type: "pure";
        kind: "Input";
        value: unknown;
        index: number;
    })[];
    expiration: {
        Epoch: number;
    } | {
        None: true | null;
    } | null | undefined;
    gasConfig: {
        payment?: {
            objectId: string;
            version: string | number | bigint;
            digest: string;
        }[] | undefined;
        owner?: string | undefined;
        price?: string | number | bigint | undefined;
        budget?: string | number | bigint | undefined;
    };
    transactions: ({
        typeArguments: string[];
        arguments: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MoveCall";
        target: `${string}::${string}::${string}`;
    } | {
        address: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "TransferObjects";
    } | {
        coin: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        amounts: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "SplitCoins";
    } | {
        destination: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        sources: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        kind: "MergeCoins";
    } | {
        objects: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        })[];
        type: {
            Some: TypeTagType;
        } | {
            None: true | null;
        };
        kind: "MakeMoveVec";
    } | {
        modules: number[][];
        dependencies: string[];
        kind: "Publish";
    } | {
        modules: number[][];
        dependencies: string[];
        ticket: {
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        } | {
            kind: "GasCoin";
        } | {
            kind: "Result";
            index: number;
        } | {
            kind: "NestedResult";
            index: number;
            resultIndex: number;
        };
        kind: "Upgrade";
        packageId: string;
    })[];
    sender?: string | undefined;
}>;
export type SerializedTransactionDataV1 = Output<typeof SerializedTransactionDataV1>;
export declare function serializeV1TransactionData(transactionData: TransactionData): SerializedTransactionDataV1;
export declare function transactionDataFromV1(data: SerializedTransactionDataV1): TransactionData;
