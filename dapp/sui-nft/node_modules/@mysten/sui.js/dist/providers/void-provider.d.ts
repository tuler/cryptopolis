import { PublicKey, SignatureScheme } from '../cryptography/publickey';
import { HttpHeaders } from '../rpc/client';
import { Base64DataBuffer } from '../serialization/base64';
import { UnserializedSignableTransaction } from '../signers/txn-data-serializers/txn-data-serializer';
import { CertifiedTransaction, TransactionDigest, GetTxnDigestsResponse, GatewayTxSeqNumber, SuiObjectInfo, GetObjectDataResponse, SuiObjectRef, SuiMoveFunctionArgTypes, SuiMoveNormalizedFunction, SuiMoveNormalizedStruct, SuiMoveNormalizedModule, SuiMoveNormalizedModules, SuiEventFilter, SuiEventEnvelope, SubscriptionId, ExecuteTransactionRequestType, SuiExecuteTransactionResponse, SuiAddress, ObjectId, TransactionQuery, PaginatedTransactionDigests, EventQuery, PaginatedEvents, EventId, RpcApiVersion, FaucetResponse, Order, TransactionEffects, CoinMetadata, DevInspectResults, SuiSystemState, DelegatedStake, ValidatorMetaData, PaginatedCoins, CoinBalance, CoinSupply, CheckpointSummary, CheckpointContents, CheckpointDigest, CheckPointContentsDigest, CommitteeInfo } from '../types';
import { Provider } from './provider';
import { DynamicFieldPage } from '../types/dynamic_fields';
export declare class VoidProvider extends Provider {
    getRpcApiVersion(): Promise<RpcApiVersion | undefined>;
    getReferenceGasPrice(): Promise<number>;
    getSuiSystemState(): Promise<SuiSystemState>;
    getDelegatedStakes(_address: SuiAddress): Promise<DelegatedStake[]>;
    getValidators(): Promise<ValidatorMetaData[]>;
    requestSuiFromFaucet(_recipient: SuiAddress, _httpHeaders?: HttpHeaders): Promise<FaucetResponse>;
    call(_endpoint: string, _params: any[]): Promise<any>;
    getCoins(_owner: SuiAddress, _coinType: string | null, _cursor: ObjectId | null, _limit: number | null): Promise<PaginatedCoins>;
    getAllCoins(_owner: SuiAddress, _cursor: ObjectId | null, _limit: number | null): Promise<PaginatedCoins>;
    getBalance(_owner: string, _coinType: string | null): Promise<CoinBalance>;
    getAllBalances(_owner: string): Promise<CoinBalance[]>;
    getCoinMetadata(_coinType: string): Promise<CoinMetadata>;
    getTotalSupply(_coinType: string): Promise<CoinSupply>;
    getObjectsOwnedByAddress(_address: string): Promise<SuiObjectInfo[]>;
    getGasObjectsOwnedByAddress(_address: string): Promise<SuiObjectInfo[]>;
    /**
     * @deprecated The method should not be used
     */
    getCoinBalancesOwnedByAddress(_address: string, _typeArg?: string): Promise<GetObjectDataResponse[]>;
    selectCoinsWithBalanceGreaterThanOrEqual(_address: string, _amount: bigint, _typeArg: string, _exclude?: ObjectId[]): Promise<GetObjectDataResponse[]>;
    selectCoinSetWithCombinedBalanceGreaterThanOrEqual(_address: string, _amount: bigint, _typeArg: string, _exclude: ObjectId[]): Promise<GetObjectDataResponse[]>;
    getObject(_objectId: string): Promise<GetObjectDataResponse>;
    getObjectRef(_objectId: string): Promise<SuiObjectRef | undefined>;
    getTransaction(_digest: TransactionDigest): Promise<CertifiedTransaction>;
    executeTransaction(_txnBytes: Base64DataBuffer, _signatureScheme: SignatureScheme, _signature: Base64DataBuffer, _pubkey: PublicKey, _requestType: ExecuteTransactionRequestType): Promise<SuiExecuteTransactionResponse>;
    devInspectTransaction(_sender: SuiAddress, _txn: UnserializedSignableTransaction | string | Base64DataBuffer, _gasPrice?: number | null, _epoch?: number | null): Promise<DevInspectResults>;
    dryRunTransaction(_txBytes: string): Promise<TransactionEffects>;
    getDynamicFields(_parent_object_id: ObjectId, _cursor?: ObjectId | null, _limit?: number | null): Promise<DynamicFieldPage>;
    getDynamicFieldObject(_parent_object_id: ObjectId, _name: string): Promise<GetObjectDataResponse>;
    getTotalTransactionNumber(): Promise<number>;
    getTransactionDigestsInRange(_start: GatewayTxSeqNumber, _end: GatewayTxSeqNumber): Promise<GetTxnDigestsResponse>;
    getMoveFunctionArgTypes(_objectId: string, _moduleName: string, _functionName: string): Promise<SuiMoveFunctionArgTypes>;
    getNormalizedMoveModulesByPackage(_objectId: string): Promise<SuiMoveNormalizedModules>;
    getNormalizedMoveModule(_objectId: string, _moduleName: string): Promise<SuiMoveNormalizedModule>;
    getNormalizedMoveFunction(_objectId: string, _moduleName: string, _functionName: string): Promise<SuiMoveNormalizedFunction>;
    getNormalizedMoveStruct(_objectId: string, _oduleName: string, _structName: string): Promise<SuiMoveNormalizedStruct>;
    syncAccountState(_address: string): Promise<any>;
    subscribeEvent(_filter: SuiEventFilter, _onMessage: (event: SuiEventEnvelope) => void): Promise<SubscriptionId>;
    unsubscribeEvent(_id: SubscriptionId): Promise<boolean>;
    private newError;
    getTransactions(_query: TransactionQuery, _cursor: TransactionDigest | null, _limit: number | null, _order: Order): Promise<PaginatedTransactionDigests>;
    getEvents(_query: EventQuery, _cursor: EventId | null, _limit: number | null, _order: Order): Promise<PaginatedEvents>;
    getLatestCheckpointSequenceNumber(): Promise<number>;
    getCheckpointSummary(_sequenceNumber: number): Promise<CheckpointSummary>;
    getCheckpointSummaryByDigest(_digest: CheckpointDigest): Promise<CheckpointSummary>;
    getCheckpointContents(_sequenceNumber: number): Promise<CheckpointContents>;
    getCheckpointContentsByDigest(_digest: CheckPointContentsDigest): Promise<CheckpointContents>;
    getCommitteeInfo(_epoch?: number): Promise<CommitteeInfo>;
}
