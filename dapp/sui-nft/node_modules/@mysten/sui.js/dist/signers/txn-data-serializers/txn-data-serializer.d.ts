import { Base64DataBuffer } from '../../serialization/base64';
import { ObjectId, PureArg, SuiAddress, SuiJsonValue, TypeTag } from '../../types';
export interface TransactionCommon {
    gasBudget?: number;
    gasPrice?: number;
}
export interface TransferObjectTransaction extends TransactionCommon {
    objectId: ObjectId;
    recipient: SuiAddress;
    gasPayment?: ObjectId;
}
export interface TransferSuiTransaction extends TransactionCommon {
    suiObjectId: ObjectId;
    recipient: SuiAddress;
    amount: number | null;
}
export interface PayTransaction extends TransactionCommon {
    /**
     * use `provider.selectCoinSetWithCombinedBalanceGreaterThanOrEqual` to
     * derive a minimal set of coins with combined balance greater than or
     * equal to sent amounts
     */
    inputCoins: ObjectId[];
    recipients: SuiAddress[];
    amounts: number[];
    gasPayment?: ObjectId;
}
export interface PaySuiTransaction extends TransactionCommon {
    /**
     * use `provider.selectCoinSetWithCombinedBalanceGreaterThanOrEqual` to
     * derive a minimal set of coins with combined balance greater than or
     * equal to (sent amounts + gas budget).
     */
    inputCoins: ObjectId[];
    recipients: SuiAddress[];
    amounts: number[];
}
export interface PayAllSuiTransaction extends TransactionCommon {
    inputCoins: ObjectId[];
    recipient: SuiAddress;
}
export interface MergeCoinTransaction extends TransactionCommon {
    primaryCoin: ObjectId;
    coinToMerge: ObjectId;
    gasPayment?: ObjectId;
}
export interface SplitCoinTransaction extends TransactionCommon {
    coinObjectId: ObjectId;
    splitAmounts: number[];
    gasPayment?: ObjectId;
}
export interface MoveCallTransaction extends TransactionCommon {
    packageObjectId: ObjectId;
    module: string;
    function: string;
    typeArguments: string[] | TypeTag[];
    arguments: (SuiJsonValue | PureArg)[];
    gasPayment?: ObjectId;
}
export interface RawMoveCall {
    packageObjectId: ObjectId;
    module: string;
    function: string;
    typeArguments: string[];
    arguments: SuiJsonValue[];
}
export type UnserializedSignableTransaction = {
    kind: 'moveCall';
    data: MoveCallTransaction;
} | {
    kind: 'transferSui';
    data: TransferSuiTransaction;
} | {
    kind: 'transferObject';
    data: TransferObjectTransaction;
} | {
    kind: 'mergeCoin';
    data: MergeCoinTransaction;
} | {
    kind: 'splitCoin';
    data: SplitCoinTransaction;
} | {
    kind: 'pay';
    data: PayTransaction;
} | {
    kind: 'paySui';
    data: PaySuiTransaction;
} | {
    kind: 'payAllSui';
    data: PayAllSuiTransaction;
} | {
    kind: 'publish';
    data: PublishTransaction;
};
/** A type that represents the possible transactions that can be signed: */
export type SignableTransaction = UnserializedSignableTransaction | {
    kind: 'bytes';
    data: Uint8Array;
};
export type SignableTransactionKind = SignableTransaction['kind'];
export type SignableTransactionData = SignableTransaction['data'];
/**
 * Transaction type used for publishing Move modules to the Sui.
 *
 * Use the util methods defined in [utils/publish.ts](../../utils/publish.ts)
 * to get `compiledModules` bytes by leveraging the sui
 * command line tool.
 *
 * ```
 * const { execSync } = require('child_process');
 * const modulesInBase64 = JSON.parse(execSync(
 *   `${cliPath} move build --dump-bytecode-as-base64 --path ${packagePath}`,
 *   { encoding: 'utf-8' }
 * ));
 *
 * // Include the following line if you are using `LocalTxnDataSerializer`, skip
 * // if you are using `RpcTxnDataSerializer`
 * // const modulesInBytes = modules.map((m) => Array.from(new Base64DataBuffer(m).getData()));
 * // ... publish logic ...
 * ```
 *
 */
export interface PublishTransaction extends TransactionCommon {
    compiledModules: ArrayLike<string> | ArrayLike<ArrayLike<number>>;
    gasPayment?: ObjectId;
}
export type TransactionBuilderMode = 'Commit' | 'DevInspect';
/**
 * Serializes a transaction to a string that can be signed by a `Signer`.
 */
export interface TxnDataSerializer {
    serializeToBytes(signerAddress: SuiAddress, txn: UnserializedSignableTransaction, mode: TransactionBuilderMode): Promise<Base64DataBuffer>;
}
