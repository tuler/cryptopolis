{
  "version": 3,
  "sources": ["../../src/types.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from './bcs-type.js';\n\n/**\n * Supported encodings.\n * Used in `Reader.toString()` as well as in `decodeStr` and `encodeStr` functions.\n */\nexport type Encoding = 'base58' | 'base64' | 'hex';\n\nexport type InferBcsType<T extends BcsType<any>> = T extends BcsType<infer U, any> ? U : never;\nexport type InferBcsInput<T extends BcsType<any, any>> = T extends BcsType<any, infer U>\n\t? U\n\t: never;\n\ntype Merge<T> = T extends object ? { [K in keyof T]: T[K] } : never;\nexport type EnumOutputShape<\n\tT extends Record<string, unknown>,\n\tKeys extends string = Extract<keyof T, string>,\n\tValues = T[keyof T] extends infer Type ? (Type extends BcsType<infer U> ? U : never) : never,\n> = 0 extends Values\n\t? EnumOutputShapeWithKeys<T, never>\n\t: 0n extends Values\n\t? EnumOutputShapeWithKeys<T, never>\n\t: '' extends Values\n\t? EnumOutputShapeWithKeys<T, never>\n\t: false extends Values\n\t? EnumOutputShapeWithKeys<T, never>\n\t: EnumOutputShapeWithKeys<T, Keys>;\n\nexport type EnumOutputShapeWithKeys<T extends Record<string, unknown>, Keys extends string> = {\n\t[K in keyof T]: Exclude<Keys, K> extends infer Empty extends string\n\t\t? Merge<\n\t\t\t\t{ [K2 in K]: T[K] } & { [K in Empty]?: never } & {\n\t\t\t\t\t$kind: K;\n\t\t\t\t}\n\t\t  >\n\t\t: never;\n}[keyof T];\n\nexport type EnumInputShape<T extends Record<string, unknown>> = {\n\t[K in keyof T]: { [K2 in K]: T[K] };\n}[keyof T];\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
