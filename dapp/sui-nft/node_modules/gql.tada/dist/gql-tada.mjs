import { Kind as n, parse as r } from "@0no-co/graphql.web";

function initGraphQLTada() {
  function graphql(e, i) {
    var a = r(e).definitions;
    var t = new Set;
    for (var s of i || []) {
      for (var d of s.definitions) {
        if (d.kind === n.FRAGMENT_DEFINITION && !t.has(d)) {
          a.push(d);
          t.add(d);
        }
      }
    }
    if (a[0].kind === n.FRAGMENT_DEFINITION && a[0].directives) {
      a[0].directives = a[0].directives.filter((n => "_unmask" !== n.name.value));
    }
    return {
      kind: n.DOCUMENT,
      definitions: a
    };
  }
  graphql.scalar = function scalar(n, r) {
    return r;
  };
  graphql.persisted = function persisted(r, e) {
    return {
      kind: n.DOCUMENT,
      definitions: e ? e.definitions : [],
      documentId: r
    };
  };
  return graphql;
}

function parse(n) {
  return r(n);
}

function readFragment(...n) {
  return 2 === n.length ? n[1] : n[0];
}

function maskFragments(n, r) {
  return r;
}

function unsafe_readResult(n, r) {
  return r;
}

var e = initGraphQLTada();

export { e as graphql, initGraphQLTada, maskFragments, parse, readFragment, unsafe_readResult };
//# sourceMappingURL=gql-tada.mjs.map
