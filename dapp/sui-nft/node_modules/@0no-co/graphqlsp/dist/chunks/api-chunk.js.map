{"version":3,"file":"api-chunk.js","sources":["../../src/ts/index.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/CharacterStream.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/RuleHelpers.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/Rules.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/onlineParser.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/utils/Range.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/utils/validateWithCustomRules.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/interface/getDiagnostics.js","../../src/ast/templates.ts","../../src/ast/checks.ts","../../src/ast/resolve.ts","../../src/ast/index.ts","../../../../node_modules/.pnpm/lru-cache@10.0.1/node_modules/lru-cache/dist/mjs/index.js","../../../../node_modules/.pnpm/@sindresorhus+fnv1a@2.0.1/node_modules/@sindresorhus/fnv1a/index.js","../../src/fieldUsage.ts","../../src/checkImports.ts","../../src/persisted.ts","../../src/diagnostics.ts"],"sourcesContent":["export var ts;\nexport function init(modules) {\n  ts = modules.typescript;\n}\n","export default class CharacterStream {\n    constructor(sourceText) {\n        this._start = 0;\n        this._pos = 0;\n        this.getStartOfToken = () => this._start;\n        this.getCurrentPosition = () => this._pos;\n        this.eol = () => this._sourceText.length === this._pos;\n        this.sol = () => this._pos === 0;\n        this.peek = () => {\n            return this._sourceText.charAt(this._pos) || null;\n        };\n        this.next = () => {\n            const char = this._sourceText.charAt(this._pos);\n            this._pos++;\n            return char;\n        };\n        this.eat = (pattern) => {\n            const isMatched = this._testNextCharacter(pattern);\n            if (isMatched) {\n                this._start = this._pos;\n                this._pos++;\n                return this._sourceText.charAt(this._pos - 1);\n            }\n            return undefined;\n        };\n        this.eatWhile = (match) => {\n            let isMatched = this._testNextCharacter(match);\n            let didEat = false;\n            if (isMatched) {\n                didEat = isMatched;\n                this._start = this._pos;\n            }\n            while (isMatched) {\n                this._pos++;\n                isMatched = this._testNextCharacter(match);\n                didEat = true;\n            }\n            return didEat;\n        };\n        this.eatSpace = () => this.eatWhile(/[\\s\\u00a0]/);\n        this.skipToEnd = () => {\n            this._pos = this._sourceText.length;\n        };\n        this.skipTo = (position) => {\n            this._pos = position;\n        };\n        this.match = (pattern, consume = true, caseFold = false) => {\n            let token = null;\n            let match = null;\n            if (typeof pattern === 'string') {\n                const regex = new RegExp(pattern, caseFold ? 'i' : 'g');\n                match = regex.test(this._sourceText.slice(this._pos, this._pos + pattern.length));\n                token = pattern;\n            }\n            else if (pattern instanceof RegExp) {\n                match = this._sourceText.slice(this._pos).match(pattern);\n                token = match === null || match === void 0 ? void 0 : match[0];\n            }\n            if (match != null &&\n                (typeof pattern === 'string' ||\n                    (match instanceof Array &&\n                        this._sourceText.startsWith(match[0], this._pos)))) {\n                if (consume) {\n                    this._start = this._pos;\n                    if (token && token.length) {\n                        this._pos += token.length;\n                    }\n                }\n                return match;\n            }\n            return false;\n        };\n        this.backUp = (num) => {\n            this._pos -= num;\n        };\n        this.column = () => this._pos;\n        this.indentation = () => {\n            const match = this._sourceText.match(/\\s*/);\n            let indent = 0;\n            if (match && match.length !== 0) {\n                const whiteSpaces = match[0];\n                let pos = 0;\n                while (whiteSpaces.length > pos) {\n                    if (whiteSpaces.charCodeAt(pos) === 9) {\n                        indent += 2;\n                    }\n                    else {\n                        indent++;\n                    }\n                    pos++;\n                }\n            }\n            return indent;\n        };\n        this.current = () => this._sourceText.slice(this._start, this._pos);\n        this._sourceText = sourceText;\n    }\n    _testNextCharacter(pattern) {\n        const character = this._sourceText.charAt(this._pos);\n        let isMatched = false;\n        if (typeof pattern === 'string') {\n            isMatched = character === pattern;\n        }\n        else {\n            isMatched =\n                pattern instanceof RegExp\n                    ? pattern.test(character)\n                    : pattern(character);\n        }\n        return isMatched;\n    }\n}\n//# sourceMappingURL=CharacterStream.js.map","export function opt(ofRule) {\n    return { ofRule };\n}\nexport function list(ofRule, separator) {\n    return { ofRule, isList: true, separator };\n}\nexport function butNot(rule, exclusions) {\n    const ruleMatch = rule.match;\n    rule.match = token => {\n        let check = false;\n        if (ruleMatch) {\n            check = ruleMatch(token);\n        }\n        return (check &&\n            exclusions.every(exclusion => exclusion.match && !exclusion.match(token)));\n    };\n    return rule;\n}\nexport function t(kind, style) {\n    return { style, match: (token) => token.kind === kind };\n}\nexport function p(value, style) {\n    return {\n        style: style || 'punctuation',\n        match: (token) => token.kind === 'Punctuation' && token.value === value,\n    };\n}\n//# sourceMappingURL=RuleHelpers.js.map","import { opt, list, butNot, t, p } from './RuleHelpers';\nimport { Kind } from 'graphql';\nexport const isIgnored = (ch) => ch === ' ' ||\n    ch === '\\t' ||\n    ch === ',' ||\n    ch === '\\n' ||\n    ch === '\\r' ||\n    ch === '\\uFEFF' ||\n    ch === '\\u00A0';\nexport const LexRules = {\n    Name: /^[_A-Za-z][_0-9A-Za-z]*/,\n    Punctuation: /^(?:!|\\$|\\(|\\)|\\.\\.\\.|:|=|&|@|\\[|]|\\{|\\||\\})/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^(?:\"\"\"(?:\\\\\"\"\"|[^\"]|\"[^\"]|\"\"[^\"])*(?:\"\"\")?|\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?)/,\n    Comment: /^#.*/,\n};\nexport const ParseRules = {\n    Document: [list('Definition')],\n    Definition(token) {\n        switch (token.value) {\n            case '{':\n                return 'ShortQuery';\n            case 'query':\n                return 'Query';\n            case 'mutation':\n                return 'Mutation';\n            case 'subscription':\n                return 'Subscription';\n            case 'fragment':\n                return Kind.FRAGMENT_DEFINITION;\n            case 'schema':\n                return 'SchemaDef';\n            case 'scalar':\n                return 'ScalarDef';\n            case 'type':\n                return 'ObjectTypeDef';\n            case 'interface':\n                return 'InterfaceDef';\n            case 'union':\n                return 'UnionDef';\n            case 'enum':\n                return 'EnumDef';\n            case 'input':\n                return 'InputDef';\n            case 'extend':\n                return 'ExtendDef';\n            case 'directive':\n                return 'DirectiveDef';\n        }\n    },\n    ShortQuery: ['SelectionSet'],\n    Query: [\n        word('query'),\n        opt(name('def')),\n        opt('VariableDefinitions'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    Mutation: [\n        word('mutation'),\n        opt(name('def')),\n        opt('VariableDefinitions'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    Subscription: [\n        word('subscription'),\n        opt(name('def')),\n        opt('VariableDefinitions'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    VariableDefinitions: [p('('), list('VariableDefinition'), p(')')],\n    VariableDefinition: ['Variable', p(':'), 'Type', opt('DefaultValue')],\n    Variable: [p('$', 'variable'), name('variable')],\n    DefaultValue: [p('='), 'Value'],\n    SelectionSet: [p('{'), list('Selection'), p('}')],\n    Selection(token, stream) {\n        return token.value === '...'\n            ? stream.match(/[\\s\\u00a0,]*(on\\b|@|{)/, false)\n                ? 'InlineFragment'\n                : 'FragmentSpread'\n            : stream.match(/[\\s\\u00a0,]*:/, false)\n                ? 'AliasedField'\n                : 'Field';\n    },\n    AliasedField: [\n        name('property'),\n        p(':'),\n        name('qualifier'),\n        opt('Arguments'),\n        list('Directive'),\n        opt('SelectionSet'),\n    ],\n    Field: [\n        name('property'),\n        opt('Arguments'),\n        list('Directive'),\n        opt('SelectionSet'),\n    ],\n    Arguments: [p('('), list('Argument'), p(')')],\n    Argument: [name('attribute'), p(':'), 'Value'],\n    FragmentSpread: [p('...'), name('def'), list('Directive')],\n    InlineFragment: [\n        p('...'),\n        opt('TypeCondition'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    FragmentDefinition: [\n        word('fragment'),\n        opt(butNot(name('def'), [word('on')])),\n        'TypeCondition',\n        list('Directive'),\n        'SelectionSet',\n    ],\n    TypeCondition: [word('on'), 'NamedType'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                    case '$':\n                        return 'Variable';\n                    case '&':\n                        return 'NamedType';\n                }\n                return null;\n            case 'Name':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                }\n                if (token.value === 'null') {\n                    return 'NullValue';\n                }\n                return 'EnumValue';\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [\n        {\n            style: 'string',\n            match: (token) => token.kind === 'String',\n            update(state, token) {\n                if (token.value.startsWith('\"\"\"')) {\n                    state.inBlockstring = !token.value.slice(3).endsWith('\"\"\"');\n                }\n            },\n        },\n    ],\n    BooleanValue: [t('Name', 'builtin')],\n    NullValue: [t('Name', 'keyword')],\n    EnumValue: [name('string-2')],\n    ListValue: [p('['), list('Value'), p(']')],\n    ObjectValue: [p('{'), list('ObjectField'), p('}')],\n    ObjectField: [name('attribute'), p(':'), 'Value'],\n    Type(token) {\n        return token.value === '[' ? 'ListType' : 'NonNullType';\n    },\n    ListType: [p('['), 'Type', p(']'), opt(p('!'))],\n    NonNullType: ['NamedType', opt(p('!'))],\n    NamedType: [type('atom')],\n    Directive: [p('@', 'meta'), name('meta'), opt('Arguments')],\n    DirectiveDef: [\n        word('directive'),\n        p('@', 'meta'),\n        name('meta'),\n        opt('ArgumentsDef'),\n        word('on'),\n        list('DirectiveLocation', p('|')),\n    ],\n    InterfaceDef: [\n        word('interface'),\n        name('atom'),\n        opt('Implements'),\n        list('Directive'),\n        p('{'),\n        list('FieldDef'),\n        p('}'),\n    ],\n    Implements: [word('implements'), list('NamedType', p('&'))],\n    DirectiveLocation: [name('string-2')],\n    SchemaDef: [\n        word('schema'),\n        list('Directive'),\n        p('{'),\n        list('OperationTypeDef'),\n        p('}'),\n    ],\n    OperationTypeDef: [name('keyword'), p(':'), name('atom')],\n    ScalarDef: [word('scalar'), name('atom'), list('Directive')],\n    ObjectTypeDef: [\n        word('type'),\n        name('atom'),\n        opt('Implements'),\n        list('Directive'),\n        p('{'),\n        list('FieldDef'),\n        p('}'),\n    ],\n    FieldDef: [\n        name('property'),\n        opt('ArgumentsDef'),\n        p(':'),\n        'Type',\n        list('Directive'),\n    ],\n    ArgumentsDef: [p('('), list('InputValueDef'), p(')')],\n    InputValueDef: [\n        name('attribute'),\n        p(':'),\n        'Type',\n        opt('DefaultValue'),\n        list('Directive'),\n    ],\n    UnionDef: [\n        word('union'),\n        name('atom'),\n        list('Directive'),\n        p('='),\n        list('UnionMember', p('|')),\n    ],\n    UnionMember: ['NamedType'],\n    EnumDef: [\n        word('enum'),\n        name('atom'),\n        list('Directive'),\n        p('{'),\n        list('EnumValueDef'),\n        p('}'),\n    ],\n    EnumValueDef: [name('string-2'), list('Directive')],\n    InputDef: [\n        word('input'),\n        name('atom'),\n        list('Directive'),\n        p('{'),\n        list('InputValueDef'),\n        p('}'),\n    ],\n    ExtendDef: [word('extend'), 'ExtensionDefinition'],\n    ExtensionDefinition(token) {\n        switch (token.value) {\n            case 'schema':\n                return Kind.SCHEMA_EXTENSION;\n            case 'scalar':\n                return Kind.SCALAR_TYPE_EXTENSION;\n            case 'type':\n                return Kind.OBJECT_TYPE_EXTENSION;\n            case 'interface':\n                return Kind.INTERFACE_TYPE_EXTENSION;\n            case 'union':\n                return Kind.UNION_TYPE_EXTENSION;\n            case 'enum':\n                return Kind.ENUM_TYPE_EXTENSION;\n            case 'input':\n                return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n        }\n    },\n    [Kind.SCHEMA_EXTENSION]: ['SchemaDef'],\n    [Kind.SCALAR_TYPE_EXTENSION]: ['ScalarDef'],\n    [Kind.OBJECT_TYPE_EXTENSION]: ['ObjectTypeDef'],\n    [Kind.INTERFACE_TYPE_EXTENSION]: ['InterfaceDef'],\n    [Kind.UNION_TYPE_EXTENSION]: ['UnionDef'],\n    [Kind.ENUM_TYPE_EXTENSION]: ['EnumDef'],\n    [Kind.INPUT_OBJECT_TYPE_EXTENSION]: ['InputDef'],\n};\nfunction word(value) {\n    return {\n        style: 'keyword',\n        match: (token) => token.kind === 'Name' && token.value === value,\n    };\n}\nfunction name(style) {\n    return {\n        style,\n        match: (token) => token.kind === 'Name',\n        update(state, token) {\n            state.name = token.value;\n        },\n    };\n}\nfunction type(style) {\n    return {\n        style,\n        match: (token) => token.kind === 'Name',\n        update(state, token) {\n            var _a;\n            if ((_a = state.prevState) === null || _a === void 0 ? void 0 : _a.prevState) {\n                state.name = token.value;\n                state.prevState.prevState.type = token.value;\n            }\n        },\n    };\n}\n//# sourceMappingURL=Rules.js.map","import { LexRules, ParseRules, isIgnored } from './Rules';\nimport { Kind } from 'graphql';\nexport default function onlineParser(options = {\n    eatWhitespace: stream => stream.eatWhile(isIgnored),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: {},\n}) {\n    return {\n        startState() {\n            const initialState = {\n                level: 0,\n                step: 0,\n                name: null,\n                kind: null,\n                type: null,\n                rule: null,\n                needsSeparator: false,\n                prevState: null,\n            };\n            pushRule(options.parseRules, initialState, Kind.DOCUMENT);\n            return initialState;\n        },\n        token(stream, state) {\n            return getToken(stream, state, options);\n        },\n    };\n}\nfunction getToken(stream, state, options) {\n    var _a;\n    if (state.inBlockstring) {\n        if (stream.match(/.*\"\"\"/)) {\n            state.inBlockstring = false;\n            return 'string';\n        }\n        stream.skipToEnd();\n        return 'string';\n    }\n    const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n    if (state.rule && state.rule.length === 0) {\n        popRule(state);\n    }\n    else if (state.needsAdvance) {\n        state.needsAdvance = false;\n        advanceRule(state, true);\n    }\n    if (stream.sol()) {\n        const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n        state.indentLevel = Math.floor(stream.indentation() / tabSize);\n    }\n    if (eatWhitespace(stream)) {\n        return 'ws';\n    }\n    const token = lex(lexRules, stream);\n    if (!token) {\n        const matchedSomething = stream.match(/\\S+/);\n        if (!matchedSomething) {\n            stream.match(/\\s/);\n        }\n        pushRule(SpecialParseRules, state, 'Invalid');\n        return 'invalidchar';\n    }\n    if (token.kind === 'Comment') {\n        pushRule(SpecialParseRules, state, 'Comment');\n        return 'comment';\n    }\n    const backupState = assign({}, state);\n    if (token.kind === 'Punctuation') {\n        if (/^[{([]/.test(token.value)) {\n            if (state.indentLevel !== undefined) {\n                state.levels = (state.levels || []).concat(state.indentLevel + 1);\n            }\n        }\n        else if (/^[})\\]]/.test(token.value)) {\n            const levels = (state.levels = (state.levels || []).slice(0, -1));\n            if (state.indentLevel &&\n                levels.length > 0 &&\n                levels.at(-1) < state.indentLevel) {\n                state.indentLevel = levels.at(-1);\n            }\n        }\n    }\n    while (state.rule) {\n        let expected = typeof state.rule === 'function'\n            ? state.step === 0\n                ? state.rule(token, stream)\n                : null\n            : state.rule[state.step];\n        if (state.needsSeparator) {\n            expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n        }\n        if (expected) {\n            if (expected.ofRule) {\n                expected = expected.ofRule;\n            }\n            if (typeof expected === 'string') {\n                pushRule(parseRules, state, expected);\n                continue;\n            }\n            if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n                if (expected.update) {\n                    expected.update(state, token);\n                }\n                if (token.kind === 'Punctuation') {\n                    advanceRule(state, true);\n                }\n                else {\n                    state.needsAdvance = true;\n                }\n                return expected.style;\n            }\n        }\n        unsuccessful(state);\n    }\n    assign(state, backupState);\n    pushRule(SpecialParseRules, state, 'Invalid');\n    return 'invalidchar';\n}\nfunction assign(to, from) {\n    const keys = Object.keys(from);\n    for (let i = 0; i < keys.length; i++) {\n        to[keys[i]] = from[keys[i]];\n    }\n    return to;\n}\nconst SpecialParseRules = {\n    Invalid: [],\n    Comment: [],\n};\nfunction pushRule(rules, state, ruleKind) {\n    if (!rules[ruleKind]) {\n        throw new TypeError('Unknown rule: ' + ruleKind);\n    }\n    state.prevState = Object.assign({}, state);\n    state.kind = ruleKind;\n    state.name = null;\n    state.type = null;\n    state.rule = rules[ruleKind];\n    state.step = 0;\n    state.needsSeparator = false;\n}\nfunction popRule(state) {\n    if (!state.prevState) {\n        return;\n    }\n    state.kind = state.prevState.kind;\n    state.name = state.prevState.name;\n    state.type = state.prevState.type;\n    state.rule = state.prevState.rule;\n    state.step = state.prevState.step;\n    state.needsSeparator = state.prevState.needsSeparator;\n    state.prevState = state.prevState.prevState;\n}\nfunction advanceRule(state, successful) {\n    var _a;\n    if (isList(state) && state.rule) {\n        const step = state.rule[state.step];\n        if (step.separator) {\n            const { separator } = step;\n            state.needsSeparator = !state.needsSeparator;\n            if (!state.needsSeparator && separator.ofRule) {\n                return;\n            }\n        }\n        if (successful) {\n            return;\n        }\n    }\n    state.needsSeparator = false;\n    state.step++;\n    while (state.rule &&\n        !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n        popRule(state);\n        if (state.rule) {\n            if (isList(state)) {\n                if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n                    state.needsSeparator = !state.needsSeparator;\n                }\n            }\n            else {\n                state.needsSeparator = false;\n                state.step++;\n            }\n        }\n    }\n}\nfunction isList(state) {\n    const step = Array.isArray(state.rule) &&\n        typeof state.rule[state.step] !== 'string' &&\n        state.rule[state.step];\n    return step && step.isList;\n}\nfunction unsuccessful(state) {\n    while (state.rule &&\n        !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n        popRule(state);\n    }\n    if (state.rule) {\n        advanceRule(state, false);\n    }\n}\nfunction lex(lexRules, stream) {\n    const kinds = Object.keys(lexRules);\n    for (let i = 0; i < kinds.length; i++) {\n        const match = stream.match(lexRules[kinds[i]]);\n        if (match && match instanceof Array) {\n            return { kind: kinds[i], value: match[0] };\n        }\n    }\n}\n//# sourceMappingURL=onlineParser.js.map","export class Range {\n    constructor(start, end) {\n        this.containsPosition = (position) => {\n            if (this.start.line === position.line) {\n                return this.start.character <= position.character;\n            }\n            if (this.end.line === position.line) {\n                return this.end.character >= position.character;\n            }\n            return this.start.line <= position.line && this.end.line >= position.line;\n        };\n        this.start = start;\n        this.end = end;\n    }\n    setStart(line, character) {\n        this.start = new Position(line, character);\n    }\n    setEnd(line, character) {\n        this.end = new Position(line, character);\n    }\n}\nexport class Position {\n    constructor(line, character) {\n        this.lessThanOrEqualTo = (position) => this.line < position.line ||\n            (this.line === position.line && this.character <= position.character);\n        this.line = line;\n        this.character = character;\n    }\n    setLine(line) {\n        this.line = line;\n    }\n    setCharacter(character) {\n        this.character = character;\n    }\n}\nexport function offsetToPosition(text, loc) {\n    const EOL = '\\n';\n    const buf = text.slice(0, loc);\n    const lines = buf.split(EOL).length - 1;\n    const lastLineIndex = buf.lastIndexOf(EOL);\n    return new Position(lines, loc - lastLineIndex - 1);\n}\nexport function locToRange(text, loc) {\n    const start = offsetToPosition(text, loc.start);\n    const end = offsetToPosition(text, loc.end);\n    return new Range(start, end);\n}\n//# sourceMappingURL=Range.js.map","import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map","import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    for (const [i, node] of error.nodes.entries()) {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    }\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map","export const templates = new Set(['gql', 'graphql']);\n","import { ts } from '../ts';\nimport { templates } from './templates';\n\n/** Checks for an immediately-invoked function expression */\nexport const isIIFE = (node: ts.Node): boolean =>\n  ts.isCallExpression(node) &&\n  node.arguments.length === 0 &&\n  (ts.isFunctionExpression(node.expression) ||\n    ts.isArrowFunction(node.expression)) &&\n  !node.expression.asteriskToken &&\n  !node.expression.modifiers?.length;\n\n/** Checks if node is a known identifier of graphql functions ('graphql' or 'gql') */\nexport const isGraphQLFunctionIdentifier = (\n  node: ts.Node\n): node is ts.Identifier =>\n  ts.isIdentifier(node) && templates.has(node.escapedText as string);\n\n/** If `checker` is passed, checks if node (as identifier/expression) is a gql.tada graphql() function */\nexport const isTadaGraphQLFunction = (\n  node: ts.Node,\n  checker: ts.TypeChecker | undefined\n): node is ts.LeftHandSideExpression => {\n  if (!ts.isLeftHandSideExpression(node)) return false;\n  const type = checker?.getTypeAtLocation(node);\n  // Any function that has both a `scalar` and `persisted` property\n  // is automatically considered a gql.tada graphql() function.\n  return (\n    type != null &&\n    type.getProperty('scalar') != null &&\n    type.getProperty('persisted') != null\n  );\n};\n\n/** If `checker` is passed, checks if node is a gql.tada graphql() call */\nexport const isTadaGraphQLCall = (\n  node: ts.CallExpression,\n  checker: ts.TypeChecker | undefined\n): boolean => {\n  // We expect graphql() to be called with either a string literal\n  // or a string literal and an array of fragments\n  if (!ts.isCallExpression(node)) {\n    return false;\n  } else if (node.arguments.length < 1 || node.arguments.length > 2) {\n    return false;\n  } else if (!ts.isStringLiteralLike(node.arguments[0])) {\n    return false;\n  }\n  return checker ? isTadaGraphQLFunction(node.expression, checker) : false;\n};\n\n/** Checks if node is a gql.tada graphql.persisted() call */\nexport const isTadaPersistedCall = (\n  node: ts.Node,\n  checker: ts.TypeChecker | undefined\n): node is ts.CallExpression => {\n  if (!ts.isCallExpression(node)) {\n    return false;\n  } else if (!ts.isPropertyAccessExpression(node.expression)) {\n    return false; // rejecting non property access calls: <expression>.<name>()\n  } else if (\n    !ts.isIdentifier(node.expression.name) ||\n    node.expression.name.escapedText !== 'persisted'\n  ) {\n    return false; // rejecting calls on anyting but 'persisted': <expression>.persisted()\n  } else if (isGraphQLFunctionIdentifier(node.expression.expression)) {\n    return true;\n  } else {\n    return isTadaGraphQLFunction(node.expression.expression, checker);\n  }\n};\n\n/** Checks if node is a gql.tada or regular graphql() call */\nexport const isGraphQLCall = (\n  node: ts.Node,\n  checker: ts.TypeChecker | undefined\n): node is ts.CallExpression => {\n  return (\n    ts.isCallExpression(node) &&\n    node.arguments.length >= 1 &&\n    node.arguments.length <= 2 &&\n    (isGraphQLFunctionIdentifier(node.expression) ||\n      isTadaGraphQLCall(node, checker))\n  );\n};\n\n/** Checks if node is a gql/graphql tagged template literal */\nexport const isGraphQLTag = (\n  node: ts.Node\n): node is ts.TaggedTemplateExpression =>\n  ts.isTaggedTemplateExpression(node) && isGraphQLFunctionIdentifier(node.tag);\n\n/** Retrieves the `__name` branded tag from gql.tada `graphql()` or `graphql.persisted()` calls */\nexport const getSchemaName = (\n  node: ts.CallExpression,\n  typeChecker: ts.TypeChecker | undefined\n): string | null => {\n  if (!typeChecker) return null;\n  const type = typeChecker.getTypeAtLocation(node.expression);\n  if (type) {\n    const brandTypeSymbol = type.getProperty('__name');\n    if (brandTypeSymbol) {\n      const brand = typeChecker.getTypeOfSymbol(brandTypeSymbol);\n      if (brand.isUnionOrIntersection()) {\n        const found = brand.types.find(x => x.isStringLiteral());\n        return found && found.isStringLiteral() ? found.value : null;\n      } else if (brand.isStringLiteral()) {\n        return brand.value;\n      }\n    }\n  }\n  return null;\n};\n","import { print } from '@0no-co/graphql.web';\nimport { ts } from '../ts';\nimport { findNode } from '.';\nimport { getSource } from '../ast';\n\ntype TemplateResult = {\n  combinedText: string;\n  resolvedSpans: Array<{\n    lines: number;\n    identifier: string;\n    original: { start: number; length: number };\n    new: { start: number; length: number };\n  }>;\n};\n\nexport function resolveTemplate(\n  node: ts.TaggedTemplateExpression | ts.StringLiteralLike,\n  filename: string,\n  info: ts.server.PluginCreateInfo\n): TemplateResult {\n  if (ts.isStringLiteralLike(node)) {\n    return { combinedText: node.getText().slice(1, -1), resolvedSpans: [] };\n  }\n\n  let templateText = node.template.getText().slice(1, -1);\n  if (\n    ts.isNoSubstitutionTemplateLiteral(node.template) ||\n    node.template.templateSpans.length === 0\n  ) {\n    return { combinedText: templateText, resolvedSpans: [] };\n  }\n\n  let addedCharacters = 0;\n  const resolvedSpans = node.template.templateSpans\n    .map(span => {\n      if (ts.isIdentifier(span.expression)) {\n        const definitions = info.languageService.getDefinitionAtPosition(\n          filename,\n          span.expression.getStart()\n        );\n        if (!definitions || !definitions.length) return;\n\n        const def = definitions[0];\n        const src = getSource(info, def.fileName);\n        if (!src) return;\n\n        const node = findNode(src, def.textSpan.start);\n        if (!node || !node.parent) return;\n\n        const parent = node.parent;\n        if (ts.isVariableDeclaration(parent)) {\n          const identifierName = span.expression.escapedText;\n          // we reduce by two to account for the \"${\"\n          const originalStart = span.expression.getStart() - 2;\n          const originalRange = {\n            start: originalStart,\n            // we add 1 to account for the \"}\"\n            length: span.expression.end - originalStart + 1,\n          };\n          if (\n            parent.initializer &&\n            ts.isTaggedTemplateExpression(parent.initializer)\n          ) {\n            const text = resolveTemplate(\n              parent.initializer,\n              def.fileName,\n              info\n            );\n            templateText = templateText.replace(\n              '${' + span.expression.escapedText + '}',\n              text.combinedText\n            );\n\n            const alteredSpan = {\n              lines: text.combinedText.split('\\n').length,\n              identifier: identifierName,\n              original: originalRange,\n              new: {\n                start: originalRange.start + addedCharacters,\n                length: text.combinedText.length,\n              },\n            };\n            addedCharacters += text.combinedText.length - originalRange.length;\n            return alteredSpan;\n          } else if (\n            parent.initializer &&\n            ts.isAsExpression(parent.initializer) &&\n            ts.isTaggedTemplateExpression(parent.initializer.expression)\n          ) {\n            const text = resolveTemplate(\n              parent.initializer.expression,\n              def.fileName,\n              info\n            );\n            templateText = templateText.replace(\n              '${' + span.expression.escapedText + '}',\n              text.combinedText\n            );\n            const alteredSpan = {\n              lines: text.combinedText.split('\\n').length,\n              identifier: identifierName,\n              original: originalRange,\n              new: {\n                start: originalRange.start + addedCharacters,\n                length: text.combinedText.length,\n              },\n            };\n            addedCharacters += text.combinedText.length - originalRange.length;\n            return alteredSpan;\n          } else if (\n            parent.initializer &&\n            ts.isAsExpression(parent.initializer) &&\n            ts.isAsExpression(parent.initializer.expression) &&\n            ts.isObjectLiteralExpression(\n              parent.initializer.expression.expression\n            )\n          ) {\n            const astObject = JSON.parse(\n              parent.initializer.expression.expression.getText()\n            );\n            const resolvedTemplate = print(astObject);\n            templateText = templateText.replace(\n              '${' + span.expression.escapedText + '}',\n              resolvedTemplate\n            );\n            const alteredSpan = {\n              lines: resolvedTemplate.split('\\n').length,\n              identifier: identifierName,\n              original: originalRange,\n              new: {\n                start: originalRange.start + addedCharacters,\n                length: resolvedTemplate.length,\n              },\n            };\n            addedCharacters += resolvedTemplate.length - originalRange.length;\n            return alteredSpan;\n          }\n\n          return undefined;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean) as TemplateResult['resolvedSpans'];\n\n  return { combinedText: templateText, resolvedSpans };\n}\n\nexport const resolveTadaFragmentArray = (\n  node: ts.Expression | undefined\n): undefined | readonly ts.Identifier[] => {\n  if (!node) return undefined;\n  // NOTE: Remove `as T`, users may commonly use `as const` for no reason\n  while (ts.isAsExpression(node)) node = node.expression;\n  if (!ts.isArrayLiteralExpression(node)) return undefined;\n  // NOTE: Let's avoid the allocation of another array here if we can\n  if (node.elements.every(ts.isIdentifier)) return node.elements;\n  const identifiers: ts.Identifier[] = [];\n  for (let element of node.elements) {\n    while (ts.isPropertyAccessExpression(element)) element = element.name;\n    if (ts.isIdentifier(element)) identifiers.push(element);\n  }\n  return identifiers;\n};\n","import { ts } from '../ts';\nimport { FragmentDefinitionNode, parse } from 'graphql';\nimport * as checks from './checks';\nimport { resolveTadaFragmentArray } from './resolve';\n\nexport { getSchemaName } from './checks';\n\nexport function getSource(info: ts.server.PluginCreateInfo, filename: string) {\n  const program = info.languageService.getProgram();\n  if (!program) return undefined;\n\n  const source = program.getSourceFile(filename);\n  if (!source) return undefined;\n\n  return source;\n}\n\nexport function findNode(\n  sourceFile: ts.SourceFile,\n  position: number\n): ts.Node | undefined {\n  function find(node: ts.Node): ts.Node | undefined {\n    if (position >= node.getStart() && position < node.getEnd()) {\n      return ts.forEachChild(node, find) || node;\n    }\n  }\n  return find(sourceFile);\n}\n\nexport function findAllTaggedTemplateNodes(\n  sourceFile: ts.SourceFile | ts.Node\n): Array<ts.TaggedTemplateExpression | ts.NoSubstitutionTemplateLiteral> {\n  const result: Array<\n    ts.TaggedTemplateExpression | ts.NoSubstitutionTemplateLiteral\n  > = [];\n  function find(node: ts.Node) {\n    if (\n      checks.isGraphQLTag(node) ||\n      (ts.isNoSubstitutionTemplateLiteral(node) &&\n        checks.isGraphQLTag(node.parent))\n    ) {\n      result.push(node);\n      return;\n    } else {\n      ts.forEachChild(node, find);\n    }\n  }\n  find(sourceFile);\n  return result;\n}\n\nfunction unrollFragment(\n  element: ts.Identifier,\n  info: ts.server.PluginCreateInfo,\n  typeChecker: ts.TypeChecker | undefined\n): Array<FragmentDefinitionNode> {\n  const fragments: Array<FragmentDefinitionNode> = [];\n  const definitions = info.languageService.getDefinitionAtPosition(\n    element.getSourceFile().fileName,\n    element.getStart()\n  );\n\n  if (!definitions || !definitions.length) return fragments;\n\n  const [fragment] = definitions;\n\n  const externalSource = getSource(info, fragment.fileName);\n  if (!externalSource) return fragments;\n\n  let found = findNode(externalSource, fragment.textSpan.start);\n  if (!found) return fragments;\n\n  while (ts.isPropertyAccessExpression(found.parent)) found = found.parent;\n\n  if (\n    ts.isVariableDeclaration(found.parent) &&\n    found.parent.initializer &&\n    ts.isCallExpression(found.parent.initializer)\n  ) {\n    found = found.parent.initializer;\n  } else if (ts.isPropertyAssignment(found.parent)) {\n    found = found.parent.initializer;\n  } else if (ts.isBinaryExpression(found.parent)) {\n    if (ts.isPropertyAccessExpression(found.parent.right)) {\n      found = found.parent.right.name as ts.Identifier;\n    } else {\n      found = found.parent.right;\n    }\n  }\n\n  // If we found another identifier, we repeat trying to find the original\n  // fragment definition\n  if (ts.isIdentifier(found)) {\n    return unrollFragment(found, info, typeChecker);\n  }\n\n  // Check whether we've got a `graphql()` or `gql()` call, by the\n  // call expression's identifier\n  if (!checks.isGraphQLCall(found, typeChecker)) {\n    return fragments;\n  }\n\n  try {\n    const text = found.arguments[0];\n    const fragmentRefs = resolveTadaFragmentArray(found.arguments[1]);\n    if (fragmentRefs) {\n      for (const identifier of fragmentRefs) {\n        fragments.push(...unrollFragment(identifier, info, typeChecker));\n      }\n    }\n    const parsed = parse(text.getText().slice(1, -1), { noLocation: true });\n    parsed.definitions.forEach(definition => {\n      if (definition.kind === 'FragmentDefinition') {\n        fragments.push(definition);\n      }\n    });\n  } catch (e) {}\n\n  return fragments;\n}\n\nexport function unrollTadaFragments(\n  fragmentsArray: ts.ArrayLiteralExpression,\n  wip: FragmentDefinitionNode[],\n  info: ts.server.PluginCreateInfo\n): FragmentDefinitionNode[] {\n  const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n  fragmentsArray.elements.forEach(element => {\n    if (ts.isIdentifier(element)) {\n      wip.push(...unrollFragment(element, info, typeChecker));\n    } else if (ts.isPropertyAccessExpression(element)) {\n      let el = element;\n      while (ts.isPropertyAccessExpression(el.expression)) el = el.expression;\n      if (ts.isIdentifier(el.name)) {\n        wip.push(...unrollFragment(el.name, info, typeChecker));\n      }\n    }\n  });\n\n  return wip;\n}\n\nexport function findAllCallExpressions(\n  sourceFile: ts.SourceFile,\n  info: ts.server.PluginCreateInfo,\n  shouldSearchFragments: boolean = true\n): {\n  nodes: Array<{\n    node: ts.StringLiteralLike;\n    schema: string | null;\n  }>;\n  fragments: Array<FragmentDefinitionNode>;\n} {\n  const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n  const result: Array<{\n    node: ts.StringLiteralLike;\n    schema: string | null;\n  }> = [];\n  let fragments: Array<FragmentDefinitionNode> = [];\n  let hasTriedToFindFragments = shouldSearchFragments ? false : true;\n\n  function find(node: ts.Node): void {\n    if (!ts.isCallExpression(node) || checks.isIIFE(node)) {\n      return ts.forEachChild(node, find);\n    }\n\n    // Check whether we've got a `graphql()` or `gql()` call, by the\n    // call expression's identifier\n    if (!checks.isGraphQLCall(node, typeChecker)) {\n      return ts.forEachChild(node, find);\n    }\n\n    const name = checks.getSchemaName(node, typeChecker);\n    const text = node.arguments[0];\n    const fragmentRefs = resolveTadaFragmentArray(node.arguments[1]);\n\n    if (!hasTriedToFindFragments && !fragmentRefs) {\n      hasTriedToFindFragments = true;\n      fragments.push(...getAllFragments(sourceFile.fileName, node, info));\n    } else if (fragmentRefs) {\n      for (const identifier of fragmentRefs) {\n        fragments.push(...unrollFragment(identifier, info, typeChecker));\n      }\n    }\n\n    if (text && ts.isStringLiteralLike(text)) {\n      result.push({ node: text, schema: name });\n    }\n  }\n  find(sourceFile);\n  return { nodes: result, fragments };\n}\n\nexport function findAllPersistedCallExpressions(\n  sourceFile: ts.SourceFile\n): Array<ts.CallExpression>;\nexport function findAllPersistedCallExpressions(\n  sourceFile: ts.SourceFile,\n  info: ts.server.PluginCreateInfo\n): Array<{ node: ts.CallExpression; schema: string | null }>;\n\nexport function findAllPersistedCallExpressions(\n  sourceFile: ts.SourceFile,\n  info?: ts.server.PluginCreateInfo\n) {\n  const result: Array<\n    ts.CallExpression | { node: ts.CallExpression; schema: string | null }\n  > = [];\n  const typeChecker = info?.languageService.getProgram()?.getTypeChecker();\n  function find(node: ts.Node): void {\n    if (!ts.isCallExpression(node) || checks.isIIFE(node)) {\n      return ts.forEachChild(node, find);\n    }\n\n    if (!checks.isTadaPersistedCall(node, typeChecker)) {\n      return;\n    } else if (info) {\n      const name = checks.getSchemaName(node, typeChecker);\n      result.push({ node, schema: name });\n    } else {\n      result.push(node);\n    }\n  }\n  find(sourceFile);\n  return result;\n}\n\nexport function getAllFragments(\n  fileName: string,\n  node: ts.Node,\n  info: ts.server.PluginCreateInfo\n) {\n  let fragments: Array<FragmentDefinitionNode> = [];\n\n  const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n  if (!ts.isCallExpression(node)) {\n    return fragments;\n  }\n\n  const fragmentRefs = resolveTadaFragmentArray(node.arguments[1]);\n  if (fragmentRefs) {\n    const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n    for (const identifier of fragmentRefs) {\n      fragments.push(...unrollFragment(identifier, info, typeChecker));\n    }\n    return fragments;\n  } else if (checks.isTadaGraphQLCall(node, typeChecker)) {\n    return fragments;\n  }\n\n  const definitions = info.languageService.getDefinitionAtPosition(\n    fileName,\n    node.expression.getStart()\n  );\n  if (!definitions || !definitions.length) return fragments;\n\n  const def = definitions[0];\n  if (!def) return fragments;\n  const src = getSource(info, def.fileName);\n  if (!src) return fragments;\n\n  ts.forEachChild(src, node => {\n    if (\n      ts.isVariableStatement(node) &&\n      node.declarationList &&\n      node.declarationList.declarations[0].name.getText() === 'documents'\n    ) {\n      const [declaration] = node.declarationList.declarations;\n      if (\n        declaration.initializer &&\n        ts.isObjectLiteralExpression(declaration.initializer)\n      ) {\n        declaration.initializer.properties.forEach(property => {\n          if (\n            ts.isPropertyAssignment(property) &&\n            ts.isStringLiteral(property.name)\n          ) {\n            try {\n              const possibleFragment = JSON.parse(\n                `${property.name.getText().replace(/'/g, '\"')}`\n              );\n\n              if (\n                possibleFragment.includes('fragment ') &&\n                possibleFragment.includes(' on ')\n              ) {\n                const parsed = parse(possibleFragment, {\n                  noLocation: true,\n                });\n                parsed.definitions.forEach(definition => {\n                  if (definition.kind === 'FragmentDefinition') {\n                    fragments.push(definition);\n                  }\n                });\n              }\n            } catch (e: any) {}\n          }\n        });\n      }\n    }\n  });\n\n  return fragments;\n}\n\nexport function findAllImports(\n  sourceFile: ts.SourceFile\n): Array<ts.ImportDeclaration> {\n  return sourceFile.statements.filter(ts.isImportDeclaration);\n}\n\nexport function bubbleUpTemplate(node: ts.Node): ts.Node {\n  while (\n    ts.isNoSubstitutionTemplateLiteral(node) ||\n    ts.isToken(node) ||\n    ts.isTemplateExpression(node) ||\n    ts.isTemplateSpan(node)\n  ) {\n    node = node.parent;\n  }\n\n  return node;\n}\n\nexport function bubbleUpCallExpression(node: ts.Node): ts.Node {\n  while (\n    ts.isStringLiteralLike(node) ||\n    ts.isToken(node) ||\n    ts.isTemplateExpression(node) ||\n    ts.isTemplateSpan(node)\n  ) {\n    node = node.parent;\n  }\n\n  return node;\n}\n","/**\n * @module LRUCache\n */\nconst perf = typeof performance === 'object' &&\n    performance &&\n    typeof performance.now === 'function'\n    ? performance\n    : Date;\nconst warned = new Set();\n/* c8 ignore start */\nconst PROCESS = (typeof process === 'object' && !!process ? process : {});\n/* c8 ignore start */\nconst emitWarning = (msg, type, code, fn) => {\n    typeof PROCESS.emitWarning === 'function'\n        ? PROCESS.emitWarning(msg, type, code, fn)\n        : console.error(`[${code}] ${type}: ${msg}`);\n};\nlet AC = globalThis.AbortController;\nlet AS = globalThis.AbortSignal;\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n    //@ts-ignore\n    AS = class AbortSignal {\n        onabort;\n        _onabort = [];\n        reason;\n        aborted = false;\n        addEventListener(_, fn) {\n            this._onabort.push(fn);\n        }\n    };\n    //@ts-ignore\n    AC = class AbortController {\n        constructor() {\n            warnACPolyfill();\n        }\n        signal = new AS();\n        abort(reason) {\n            if (this.signal.aborted)\n                return;\n            //@ts-ignore\n            this.signal.reason = reason;\n            //@ts-ignore\n            this.signal.aborted = true;\n            //@ts-ignore\n            for (const fn of this.signal._onabort) {\n                fn(reason);\n            }\n            this.signal.onabort?.(reason);\n        }\n    };\n    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';\n    const warnACPolyfill = () => {\n        if (!printACPolyfillWarning)\n            return;\n        printACPolyfillWarning = false;\n        emitWarning('AbortController is not defined. If using lru-cache in ' +\n            'node 14, load an AbortController polyfill from the ' +\n            '`node-abort-controller` package. A minimal polyfill is ' +\n            'provided for use by LRUCache.fetch(), but it should not be ' +\n            'relied upon in other contexts (eg, passing it to other APIs that ' +\n            'use AbortController/AbortSignal might have undesirable effects). ' +\n            'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.', 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);\n    };\n}\n/* c8 ignore stop */\nconst shouldWarn = (code) => !warned.has(code);\nconst TYPE = Symbol('type');\nconst isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max) => !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n        ? Uint8Array\n        : max <= Math.pow(2, 16)\n            ? Uint16Array\n            : max <= Math.pow(2, 32)\n                ? Uint32Array\n                : max <= Number.MAX_SAFE_INTEGER\n                    ? ZeroArray\n                    : null;\n/* c8 ignore stop */\nclass ZeroArray extends Array {\n    constructor(size) {\n        super(size);\n        this.fill(0);\n    }\n}\nclass Stack {\n    heap;\n    length;\n    // private constructor\n    static #constructing = false;\n    static create(max) {\n        const HeapCls = getUintArray(max);\n        if (!HeapCls)\n            return [];\n        Stack.#constructing = true;\n        const s = new Stack(max, HeapCls);\n        Stack.#constructing = false;\n        return s;\n    }\n    constructor(max, HeapCls) {\n        /* c8 ignore start */\n        if (!Stack.#constructing) {\n            throw new TypeError('instantiate Stack using Stack.create(n)');\n        }\n        /* c8 ignore stop */\n        this.heap = new HeapCls(max);\n        this.length = 0;\n    }\n    push(n) {\n        this.heap[this.length++] = n;\n    }\n    pop() {\n        return this.heap[--this.length];\n    }\n}\n/**\n * Default export, the thing you're using this module to get.\n *\n * All properties from the options object (with the exception of\n * {@link OptionsBase.max} and {@link OptionsBase.maxSize}) are added as\n * normal public members. (`max` and `maxBase` are read-only getters.)\n * Changing any of these will alter the defaults for subsequent method calls,\n * but is otherwise safe.\n */\nexport class LRUCache {\n    // properties coming in from the options of these, only max and maxSize\n    // really *need* to be protected. The rest can be modified, as they just\n    // set defaults for various methods.\n    #max;\n    #maxSize;\n    #dispose;\n    #disposeAfter;\n    #fetchMethod;\n    /**\n     * {@link LRUCache.OptionsBase.ttl}\n     */\n    ttl;\n    /**\n     * {@link LRUCache.OptionsBase.ttlResolution}\n     */\n    ttlResolution;\n    /**\n     * {@link LRUCache.OptionsBase.ttlAutopurge}\n     */\n    ttlAutopurge;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnGet}\n     */\n    updateAgeOnGet;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnHas}\n     */\n    updateAgeOnHas;\n    /**\n     * {@link LRUCache.OptionsBase.allowStale}\n     */\n    allowStale;\n    /**\n     * {@link LRUCache.OptionsBase.noDisposeOnSet}\n     */\n    noDisposeOnSet;\n    /**\n     * {@link LRUCache.OptionsBase.noUpdateTTL}\n     */\n    noUpdateTTL;\n    /**\n     * {@link LRUCache.OptionsBase.maxEntrySize}\n     */\n    maxEntrySize;\n    /**\n     * {@link LRUCache.OptionsBase.sizeCalculation}\n     */\n    sizeCalculation;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n     */\n    noDeleteOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n     */\n    noDeleteOnStaleGet;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n     */\n    allowStaleOnFetchAbort;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n     */\n    allowStaleOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n     */\n    ignoreFetchAbort;\n    // computed properties\n    #size;\n    #calculatedSize;\n    #keyMap;\n    #keyList;\n    #valList;\n    #next;\n    #prev;\n    #head;\n    #tail;\n    #free;\n    #disposed;\n    #sizes;\n    #starts;\n    #ttls;\n    #hasDispose;\n    #hasFetchMethod;\n    #hasDisposeAfter;\n    /**\n     * Do not call this method unless you need to inspect the\n     * inner workings of the cache.  If anything returned by this\n     * object is modified in any way, strange breakage may occur.\n     *\n     * These fields are private for a reason!\n     *\n     * @internal\n     */\n    static unsafeExposeInternals(c) {\n        return {\n            // properties\n            starts: c.#starts,\n            ttls: c.#ttls,\n            sizes: c.#sizes,\n            keyMap: c.#keyMap,\n            keyList: c.#keyList,\n            valList: c.#valList,\n            next: c.#next,\n            prev: c.#prev,\n            get head() {\n                return c.#head;\n            },\n            get tail() {\n                return c.#tail;\n            },\n            free: c.#free,\n            // methods\n            isBackgroundFetch: (p) => c.#isBackgroundFetch(p),\n            backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),\n            moveToTail: (index) => c.#moveToTail(index),\n            indexes: (options) => c.#indexes(options),\n            rindexes: (options) => c.#rindexes(options),\n            isStale: (index) => c.#isStale(index),\n        };\n    }\n    // Protected read-only members\n    /**\n     * {@link LRUCache.OptionsBase.max} (read-only)\n     */\n    get max() {\n        return this.#max;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.maxSize} (read-only)\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n    /**\n     * The total computed size of items in the cache (read-only)\n     */\n    get calculatedSize() {\n        return this.#calculatedSize;\n    }\n    /**\n     * The number of items stored in the cache (read-only)\n     */\n    get size() {\n        return this.#size;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n     */\n    get fetchMethod() {\n        return this.#fetchMethod;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.dispose} (read-only)\n     */\n    get dispose() {\n        return this.#dispose;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n     */\n    get disposeAfter() {\n        return this.#disposeAfter;\n    }\n    constructor(options) {\n        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort, } = options;\n        if (max !== 0 && !isPosInt(max)) {\n            throw new TypeError('max option must be a nonnegative integer');\n        }\n        const UintArray = max ? getUintArray(max) : Array;\n        if (!UintArray) {\n            throw new Error('invalid max value: ' + max);\n        }\n        this.#max = max;\n        this.#maxSize = maxSize;\n        this.maxEntrySize = maxEntrySize || this.#maxSize;\n        this.sizeCalculation = sizeCalculation;\n        if (this.sizeCalculation) {\n            if (!this.#maxSize && !this.maxEntrySize) {\n                throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');\n            }\n            if (typeof this.sizeCalculation !== 'function') {\n                throw new TypeError('sizeCalculation set to non-function');\n            }\n        }\n        if (fetchMethod !== undefined &&\n            typeof fetchMethod !== 'function') {\n            throw new TypeError('fetchMethod must be a function if specified');\n        }\n        this.#fetchMethod = fetchMethod;\n        this.#hasFetchMethod = !!fetchMethod;\n        this.#keyMap = new Map();\n        this.#keyList = new Array(max).fill(undefined);\n        this.#valList = new Array(max).fill(undefined);\n        this.#next = new UintArray(max);\n        this.#prev = new UintArray(max);\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free = Stack.create(max);\n        this.#size = 0;\n        this.#calculatedSize = 0;\n        if (typeof dispose === 'function') {\n            this.#dispose = dispose;\n        }\n        if (typeof disposeAfter === 'function') {\n            this.#disposeAfter = disposeAfter;\n            this.#disposed = [];\n        }\n        else {\n            this.#disposeAfter = undefined;\n            this.#disposed = undefined;\n        }\n        this.#hasDispose = !!this.#dispose;\n        this.#hasDisposeAfter = !!this.#disposeAfter;\n        this.noDisposeOnSet = !!noDisposeOnSet;\n        this.noUpdateTTL = !!noUpdateTTL;\n        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n        this.ignoreFetchAbort = !!ignoreFetchAbort;\n        // NB: maxEntrySize is set to maxSize if it's set\n        if (this.maxEntrySize !== 0) {\n            if (this.#maxSize !== 0) {\n                if (!isPosInt(this.#maxSize)) {\n                    throw new TypeError('maxSize must be a positive integer if specified');\n                }\n            }\n            if (!isPosInt(this.maxEntrySize)) {\n                throw new TypeError('maxEntrySize must be a positive integer if specified');\n            }\n            this.#initializeSizeTracking();\n        }\n        this.allowStale = !!allowStale;\n        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n        this.updateAgeOnGet = !!updateAgeOnGet;\n        this.updateAgeOnHas = !!updateAgeOnHas;\n        this.ttlResolution =\n            isPosInt(ttlResolution) || ttlResolution === 0\n                ? ttlResolution\n                : 1;\n        this.ttlAutopurge = !!ttlAutopurge;\n        this.ttl = ttl || 0;\n        if (this.ttl) {\n            if (!isPosInt(this.ttl)) {\n                throw new TypeError('ttl must be a positive integer if specified');\n            }\n            this.#initializeTTLTracking();\n        }\n        // do not allow completely unbounded caches\n        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n            throw new TypeError('At least one of max, maxSize, or ttl is required');\n        }\n        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n            const code = 'LRU_CACHE_UNBOUNDED';\n            if (shouldWarn(code)) {\n                warned.add(code);\n                const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' +\n                    'result in unbounded memory consumption.';\n                emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n            }\n        }\n    }\n    /**\n     * Return the remaining TTL time for a given entry key\n     */\n    getRemainingTTL(key) {\n        return this.#keyMap.has(key) ? Infinity : 0;\n    }\n    #initializeTTLTracking() {\n        const ttls = new ZeroArray(this.#max);\n        const starts = new ZeroArray(this.#max);\n        this.#ttls = ttls;\n        this.#starts = starts;\n        this.#setItemTTL = (index, ttl, start = perf.now()) => {\n            starts[index] = ttl !== 0 ? start : 0;\n            ttls[index] = ttl;\n            if (ttl !== 0 && this.ttlAutopurge) {\n                const t = setTimeout(() => {\n                    if (this.#isStale(index)) {\n                        this.delete(this.#keyList[index]);\n                    }\n                }, ttl + 1);\n                // unref() not supported on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n        };\n        this.#updateItemAge = index => {\n            starts[index] = ttls[index] !== 0 ? perf.now() : 0;\n        };\n        this.#statusTTL = (status, index) => {\n            if (ttls[index]) {\n                const ttl = ttls[index];\n                const start = starts[index];\n                status.ttl = ttl;\n                status.start = start;\n                status.now = cachedNow || getNow();\n                const age = status.now - start;\n                status.remainingTTL = ttl - age;\n            }\n        };\n        // debounce calls to perf.now() to 1s so we're not hitting\n        // that costly call repeatedly.\n        let cachedNow = 0;\n        const getNow = () => {\n            const n = perf.now();\n            if (this.ttlResolution > 0) {\n                cachedNow = n;\n                const t = setTimeout(() => (cachedNow = 0), this.ttlResolution);\n                // not available on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n            const ttl = ttls[index];\n            const start = starts[index];\n            if (ttl === 0 || start === 0) {\n                return Infinity;\n            }\n            const age = (cachedNow || getNow()) - start;\n            return ttl - age;\n        };\n        this.#isStale = index => {\n            return (ttls[index] !== 0 &&\n                starts[index] !== 0 &&\n                (cachedNow || getNow()) - starts[index] > ttls[index]);\n        };\n    }\n    // conditionally set private methods related to TTL\n    #updateItemAge = () => { };\n    #statusTTL = () => { };\n    #setItemTTL = () => { };\n    /* c8 ignore stop */\n    #isStale = () => false;\n    #initializeSizeTracking() {\n        const sizes = new ZeroArray(this.#max);\n        this.#calculatedSize = 0;\n        this.#sizes = sizes;\n        this.#removeItemSize = index => {\n            this.#calculatedSize -= sizes[index];\n            sizes[index] = 0;\n        };\n        this.#requireSize = (k, v, size, sizeCalculation) => {\n            // provisionally accept background fetches.\n            // actual value size will be checked when they return.\n            if (this.#isBackgroundFetch(v)) {\n                return 0;\n            }\n            if (!isPosInt(size)) {\n                if (sizeCalculation) {\n                    if (typeof sizeCalculation !== 'function') {\n                        throw new TypeError('sizeCalculation must be a function');\n                    }\n                    size = sizeCalculation(v, k);\n                    if (!isPosInt(size)) {\n                        throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n                    }\n                }\n                else {\n                    throw new TypeError('invalid size value (must be positive integer). ' +\n                        'When maxSize or maxEntrySize is used, sizeCalculation ' +\n                        'or size must be set.');\n                }\n            }\n            return size;\n        };\n        this.#addItemSize = (index, size, status) => {\n            sizes[index] = size;\n            if (this.#maxSize) {\n                const maxSize = this.#maxSize - sizes[index];\n                while (this.#calculatedSize > maxSize) {\n                    this.#evict(true);\n                }\n            }\n            this.#calculatedSize += sizes[index];\n            if (status) {\n                status.entrySize = size;\n                status.totalCalculatedSize = this.#calculatedSize;\n            }\n        };\n    }\n    #removeItemSize = _i => { };\n    #addItemSize = (_i, _s, _st) => { };\n    #requireSize = (_k, _v, size, sizeCalculation) => {\n        if (size || sizeCalculation) {\n            throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');\n        }\n        return 0;\n    };\n    *#indexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#tail; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#head) {\n                    break;\n                }\n                else {\n                    i = this.#prev[i];\n                }\n            }\n        }\n    }\n    *#rindexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#head; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#tail) {\n                    break;\n                }\n                else {\n                    i = this.#next[i];\n                }\n            }\n        }\n    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from most recently used to least recently used.\n     */\n    *entries() {\n        for (const i of this.#indexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.entries}\n     *\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from least recently used to most recently used.\n     */\n    *rentries() {\n        for (const i of this.#rindexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the keys in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *keys() {\n        for (const i of this.#indexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.keys}\n     *\n     * Return a generator yielding the keys in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rkeys() {\n        for (const i of this.#rindexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the values in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *values() {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.values}\n     *\n     * Return a generator yielding the values in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rvalues() {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Iterating over the cache itself yields the same results as\n     * {@link LRUCache.entries}\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n     * Find a value for which the supplied fn method returns a truthy value,\n     * similar to Array.find().  fn is called as fn(value, key, cache).\n     */\n    find(fn, getOptions = {}) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n    /**\n     * Call the supplied function on each item in the cache, in order from\n     * most recently used to least recently used.  fn is called as\n     * fn(value, key, cache).  Does not update age or recenty of use.\n     * Does not iterate over stale values.\n     */\n    forEach(fn, thisp = this) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * The same as {@link LRUCache.forEach} but items are iterated over in\n     * reverse order.  (ie, less recently used items are iterated over first.)\n     */\n    rforEach(fn, thisp = this) {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * Delete any stale entries. Returns true if anything was removed,\n     * false otherwise.\n     */\n    purgeStale() {\n        let deleted = false;\n        for (const i of this.#rindexes({ allowStale: true })) {\n            if (this.#isStale(i)) {\n                this.delete(this.#keyList[i]);\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n     * passed to cache.load()\n     */\n    dump() {\n        const arr = [];\n        for (const i of this.#indexes({ allowStale: true })) {\n            const key = this.#keyList[i];\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined || key === undefined)\n                continue;\n            const entry = { value };\n            if (this.#ttls && this.#starts) {\n                entry.ttl = this.#ttls[i];\n                // always dump the start relative to a portable timestamp\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = perf.now() - this.#starts[i];\n                entry.start = Math.floor(Date.now() - age);\n            }\n            if (this.#sizes) {\n                entry.size = this.#sizes[i];\n            }\n            arr.unshift([key, entry]);\n        }\n        return arr;\n    }\n    /**\n     * Reset the cache and load in the items in entries in the order listed.\n     * Note that the shape of the resulting cache may be different if the\n     * same options are not used in both caches.\n     */\n    load(arr) {\n        this.clear();\n        for (const [key, entry] of arr) {\n            if (entry.start) {\n                // entry.start is a portable timestamp, but we may be using\n                // node's performance.now(), so calculate the offset, so that\n                // we get the intended remaining TTL, no matter how long it's\n                // been on ice.\n                //\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = Date.now() - entry.start;\n                entry.start = perf.now() - age;\n            }\n            this.set(key, entry.value, entry);\n        }\n    }\n    /**\n     * Add a value to the cache.\n     *\n     * Note: if `undefined` is specified as a value, this is an alias for\n     * {@link LRUCache#delete}\n     */\n    set(k, v, setOptions = {}) {\n        if (v === undefined) {\n            this.delete(k);\n            return this;\n        }\n        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status, } = setOptions;\n        let { noUpdateTTL = this.noUpdateTTL } = setOptions;\n        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);\n        // if the item doesn't fit, don't do anything\n        // NB: maxEntrySize set to maxSize by default\n        if (this.maxEntrySize && size > this.maxEntrySize) {\n            if (status) {\n                status.set = 'miss';\n                status.maxEntrySizeExceeded = true;\n            }\n            // have to delete, in case something is there already.\n            this.delete(k);\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n                ? this.#tail\n                : this.#free.length !== 0\n                    ? this.#free.pop()\n                    : this.#size === this.#max\n                        ? this.#evict(false)\n                        : this.#size);\n            this.#keyList[index] = k;\n            this.#valList[index] = v;\n            this.#keyMap.set(k, index);\n            this.#next[this.#tail] = index;\n            this.#prev[index] = this.#tail;\n            this.#tail = index;\n            this.#size++;\n            this.#addItemSize(index, size, status);\n            if (status)\n                status.set = 'add';\n            noUpdateTTL = false;\n        }\n        else {\n            // update\n            this.#moveToTail(index);\n            const oldVal = this.#valList[index];\n            if (v !== oldVal) {\n                if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n                    oldVal.__abortController.abort(new Error('replaced'));\n                    const { __staleWhileFetching: s } = oldVal;\n                    if (s !== undefined && !noDisposeOnSet) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(s, k, 'set');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([s, k, 'set']);\n                        }\n                    }\n                }\n                else if (!noDisposeOnSet) {\n                    if (this.#hasDispose) {\n                        this.#dispose?.(oldVal, k, 'set');\n                    }\n                    if (this.#hasDisposeAfter) {\n                        this.#disposed?.push([oldVal, k, 'set']);\n                    }\n                }\n                this.#removeItemSize(index);\n                this.#addItemSize(index, size, status);\n                this.#valList[index] = v;\n                if (status) {\n                    status.set = 'replace';\n                    const oldValue = oldVal && this.#isBackgroundFetch(oldVal)\n                        ? oldVal.__staleWhileFetching\n                        : oldVal;\n                    if (oldValue !== undefined)\n                        status.oldValue = oldValue;\n                }\n            }\n            else if (status) {\n                status.set = 'update';\n            }\n        }\n        if (ttl !== 0 && !this.#ttls) {\n            this.#initializeTTLTracking();\n        }\n        if (this.#ttls) {\n            if (!noUpdateTTL) {\n                this.#setItemTTL(index, ttl, start);\n            }\n            if (status)\n                this.#statusTTL(status, index);\n        }\n        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return this;\n    }\n    /**\n     * Evict the least recently used item, returning its value or\n     * `undefined` if cache is empty.\n     */\n    pop() {\n        try {\n            while (this.#size) {\n                const val = this.#valList[this.#head];\n                this.#evict(true);\n                if (this.#isBackgroundFetch(val)) {\n                    if (val.__staleWhileFetching) {\n                        return val.__staleWhileFetching;\n                    }\n                }\n                else if (val !== undefined) {\n                    return val;\n                }\n            }\n        }\n        finally {\n            if (this.#hasDisposeAfter && this.#disposed) {\n                const dt = this.#disposed;\n                let task;\n                while ((task = dt?.shift())) {\n                    this.#disposeAfter?.(...task);\n                }\n            }\n        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('evicted'));\n        }\n        else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n                this.#dispose?.(v, k, 'evict');\n            }\n            if (this.#hasDisposeAfter) {\n                this.#disposed?.push([v, k, 'evict']);\n            }\n        }\n        this.#removeItemSize(head);\n        // if we aren't about to use the index, then null these out\n        if (free) {\n            this.#keyList[head] = undefined;\n            this.#valList[head] = undefined;\n            this.#free.push(head);\n        }\n        if (this.#size === 1) {\n            this.#head = this.#tail = 0;\n            this.#free.length = 0;\n        }\n        else {\n            this.#head = this.#next[head];\n        }\n        this.#keyMap.delete(k);\n        this.#size--;\n        return head;\n    }\n    /**\n     * Check if a key is in the cache, without updating the recency of use.\n     * Will return false if the item is stale, even though it is technically\n     * in the cache.\n     *\n     * Will not update item age unless\n     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n                v.__staleWhileFetching === undefined) {\n                return false;\n            }\n            if (!this.#isStale(index)) {\n                if (updateAgeOnHas) {\n                    this.#updateItemAge(index);\n                }\n                if (status) {\n                    status.has = 'hit';\n                    this.#statusTTL(status, index);\n                }\n                return true;\n            }\n            else if (status) {\n                status.has = 'stale';\n                this.#statusTTL(status, index);\n            }\n        }\n        else if (status) {\n            status.has = 'miss';\n        }\n        return false;\n    }\n    /**\n     * Like {@link LRUCache#get} but doesn't update recency or delete stale\n     * items.\n     *\n     * Returns `undefined` if the item is stale, unless\n     * {@link LRUCache.OptionsBase.allowStale} is set.\n     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined &&\n            (allowStale || !this.#isStale(index))) {\n            const v = this.#valList[index];\n            // either stale and allowed, or forcing a refresh of non-stale value\n            return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n        }\n    }\n    #backgroundFetch(k, index, options, context) {\n        const v = index === undefined ? undefined : this.#valList[index];\n        if (this.#isBackgroundFetch(v)) {\n            return v;\n        }\n        const ac = new AC();\n        const { signal } = options;\n        // when/if our AC signals, then stop listening to theirs.\n        signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n            signal: ac.signal,\n        });\n        const fetchOpts = {\n            signal: ac.signal,\n            options,\n            context,\n        };\n        const cb = (v, updateCache = false) => {\n            const { aborted } = ac.signal;\n            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n            if (options.status) {\n                if (aborted && !updateCache) {\n                    options.status.fetchAborted = true;\n                    options.status.fetchError = ac.signal.reason;\n                    if (ignoreAbort)\n                        options.status.fetchAbortIgnored = true;\n                }\n                else {\n                    options.status.fetchResolved = true;\n                }\n            }\n            if (aborted && !ignoreAbort && !updateCache) {\n                return fetchFail(ac.signal.reason);\n            }\n            // either we didn't abort, and are still here, or we did, and ignored\n            const bf = p;\n            if (this.#valList[index] === p) {\n                if (v === undefined) {\n                    if (bf.__staleWhileFetching) {\n                        this.#valList[index] = bf.__staleWhileFetching;\n                    }\n                    else {\n                        this.delete(k);\n                    }\n                }\n                else {\n                    if (options.status)\n                        options.status.fetchUpdated = true;\n                    this.set(k, v, fetchOpts.options);\n                }\n            }\n            return v;\n        };\n        const eb = (er) => {\n            if (options.status) {\n                options.status.fetchRejected = true;\n                options.status.fetchError = er;\n            }\n            return fetchFail(er);\n        };\n        const fetchFail = (er) => {\n            const { aborted } = ac.signal;\n            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n            const noDelete = allowStale || options.noDeleteOnFetchRejection;\n            const bf = p;\n            if (this.#valList[index] === p) {\n                // if we allow stale on fetch rejections, then we need to ensure that\n                // the stale value is not removed from the cache when the fetch fails.\n                const del = !noDelete || bf.__staleWhileFetching === undefined;\n                if (del) {\n                    this.delete(k);\n                }\n                else if (!allowStaleAborted) {\n                    // still replace the *promise* with the stale value,\n                    // since we are done with the promise at this point.\n                    // leave it untouched if we're still waiting for an\n                    // aborted background fetch that hasn't yet returned.\n                    this.#valList[index] = bf.__staleWhileFetching;\n                }\n            }\n            if (allowStale) {\n                if (options.status && bf.__staleWhileFetching !== undefined) {\n                    options.status.returnedStale = true;\n                }\n                return bf.__staleWhileFetching;\n            }\n            else if (bf.__returned === bf) {\n                throw er;\n            }\n        };\n        const pcall = (res, rej) => {\n            const fmp = this.#fetchMethod?.(k, v, fetchOpts);\n            if (fmp && fmp instanceof Promise) {\n                fmp.then(v => res(v === undefined ? undefined : v), rej);\n            }\n            // ignored, we go until we finish, regardless.\n            // defer check until we are actually aborting,\n            // so fetchMethod can override.\n            ac.signal.addEventListener('abort', () => {\n                if (!options.ignoreFetchAbort ||\n                    options.allowStaleOnFetchAbort) {\n                    res(undefined);\n                    // when it eventually resolves, update the cache.\n                    if (options.allowStaleOnFetchAbort) {\n                        res = v => cb(v, true);\n                    }\n                }\n            });\n        };\n        if (options.status)\n            options.status.fetchDispatched = true;\n        const p = new Promise(pcall).then(cb, eb);\n        const bf = Object.assign(p, {\n            __abortController: ac,\n            __staleWhileFetching: v,\n            __returned: undefined,\n        });\n        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n        }\n        return bf;\n    }\n    #isBackgroundFetch(p) {\n        if (!this.#hasFetchMethod)\n            return false;\n        const b = p;\n        return (!!b &&\n            b instanceof Promise &&\n            b.hasOwnProperty('__staleWhileFetching') &&\n            b.__abortController instanceof AC);\n    }\n    async fetch(k, fetchOptions = {}) {\n        const { \n        // get options\n        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, \n        // set options\n        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, \n        // fetch exclusive options\n        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal, } = fetchOptions;\n        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n                status,\n            });\n        }\n        const options = {\n            allowStale,\n            updateAgeOnGet,\n            noDeleteOnStaleGet,\n            ttl,\n            noDisposeOnSet,\n            size,\n            sizeCalculation,\n            noUpdateTTL,\n            noDeleteOnFetchRejection,\n            allowStaleOnFetchRejection,\n            allowStaleOnFetchAbort,\n            ignoreFetchAbort,\n            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n            const p = this.#backgroundFetch(k, index, options, context);\n            return (p.__returned = p);\n        }\n        else {\n            // in cache, maybe already fetching\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                const stale = allowStale && v.__staleWhileFetching !== undefined;\n                if (status) {\n                    status.fetch = 'inflight';\n                    if (stale)\n                        status.returnedStale = true;\n                }\n                return stale ? v.__staleWhileFetching : (v.__returned = v);\n            }\n            // if we force a refresh, that means do NOT serve the cached value,\n            // unless we are already in the process of refreshing the cache.\n            const isStale = this.#isStale(index);\n            if (!forceRefresh && !isStale) {\n                if (status)\n                    status.fetch = 'hit';\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                if (status)\n                    this.#statusTTL(status, index);\n                return v;\n            }\n            // ok, it is stale or a forced refresh, and not already fetching.\n            // refresh the cache.\n            const p = this.#backgroundFetch(k, index, options, context);\n            const hasStale = p.__staleWhileFetching !== undefined;\n            const staleVal = hasStale && allowStale;\n            if (status) {\n                status.fetch = isStale ? 'stale' : 'refresh';\n                if (staleVal && isStale)\n                    status.returnedStale = true;\n            }\n            return staleVal ? p.__staleWhileFetching : (p.__returned = p);\n        }\n    }\n    /**\n     * Return a value from the cache. Will update the recency of the cache\n     * entry found.\n     *\n     * If the key is not found, get() will return `undefined`.\n     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n            if (status)\n                this.#statusTTL(status, index);\n            if (this.#isStale(index)) {\n                if (status)\n                    status.get = 'stale';\n                // delete only if not an in-flight background fetch\n                if (!fetching) {\n                    if (!noDeleteOnStaleGet) {\n                        this.delete(k);\n                    }\n                    if (status && allowStale)\n                        status.returnedStale = true;\n                    return allowStale ? value : undefined;\n                }\n                else {\n                    if (status &&\n                        allowStale &&\n                        value.__staleWhileFetching !== undefined) {\n                        status.returnedStale = true;\n                    }\n                    return allowStale ? value.__staleWhileFetching : undefined;\n                }\n            }\n            else {\n                if (status)\n                    status.get = 'hit';\n                // if we're currently fetching it, we don't actually have it yet\n                // it's not stale, which means this isn't a staleWhileRefetching.\n                // If it's not stale, and fetching, AND has a __staleWhileFetching\n                // value, then that means the user fetched with {forceRefresh:true},\n                // so it's safe to return that value.\n                if (fetching) {\n                    return value.__staleWhileFetching;\n                }\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                return value;\n            }\n        }\n        else if (status) {\n            status.get = 'miss';\n        }\n    }\n    #connect(p, n) {\n        this.#prev[n] = p;\n        this.#next[p] = n;\n    }\n    #moveToTail(index) {\n        // if tail already, nothing to do\n        // if head, move head to next[index]\n        // else\n        //   move next[prev[index]] to next[index] (head has no prev)\n        //   move prev[next[index]] to prev[index]\n        // prev[index] = tail\n        // next[tail] = index\n        // tail = index\n        if (index !== this.#tail) {\n            if (index === this.#head) {\n                this.#head = this.#next[index];\n            }\n            else {\n                this.#connect(this.#prev[index], this.#next[index]);\n            }\n            this.#connect(this.#tail, index);\n            this.#tail = index;\n        }\n    }\n    /**\n     * Deletes a key out of the cache.\n     * Returns true if the key was deleted, false otherwise.\n     */\n    delete(k) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n                    this.clear();\n                }\n                else {\n                    this.#removeItemSize(index);\n                    const v = this.#valList[index];\n                    if (this.#isBackgroundFetch(v)) {\n                        v.__abortController.abort(new Error('deleted'));\n                    }\n                    else if (this.#hasDispose || this.#hasDisposeAfter) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(v, k, 'delete');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([v, k, 'delete']);\n                        }\n                    }\n                    this.#keyMap.delete(k);\n                    this.#keyList[index] = undefined;\n                    this.#valList[index] = undefined;\n                    if (index === this.#tail) {\n                        this.#tail = this.#prev[index];\n                    }\n                    else if (index === this.#head) {\n                        this.#head = this.#next[index];\n                    }\n                    else {\n                        this.#next[this.#prev[index]] = this.#next[index];\n                        this.#prev[this.#next[index]] = this.#prev[index];\n                    }\n                    this.#size--;\n                    this.#free.push(index);\n                }\n            }\n        }\n        if (this.#hasDisposeAfter && this.#disposed?.length) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Clear the cache entirely, throwing away all values.\n     */\n    clear() {\n        for (const index of this.#rindexes({ allowStale: true })) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                v.__abortController.abort(new Error('deleted'));\n            }\n            else {\n                const k = this.#keyList[index];\n                if (this.#hasDispose) {\n                    this.#dispose?.(v, k, 'delete');\n                }\n                if (this.#hasDisposeAfter) {\n                    this.#disposed?.push([v, k, 'delete']);\n                }\n            }\n        }\n        this.#keyMap.clear();\n        this.#valList.fill(undefined);\n        this.#keyList.fill(undefined);\n        if (this.#ttls && this.#starts) {\n            this.#ttls.fill(0);\n            this.#starts.fill(0);\n        }\n        if (this.#sizes) {\n            this.#sizes.fill(0);\n        }\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free.length = 0;\n        this.#calculatedSize = 0;\n        this.#size = 0;\n        if (this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","'use strict';\n\n// FNV_PRIMES and FNV_OFFSETS from\n// http://www.isthe.com/chongo/tech/comp/fnv/index.html#FNV-param\n\nconst FNV_PRIMES = {\n\t32: 16777619n,\n\t64: 1099511628211n,\n\t128: 309485009821345068724781371n,\n\t256: 374144419156711147060143317175368453031918731002211n,\n\t512: 35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852759n,\n\t1024: 5016456510113118655434598811035278955030765345404790744303017523831112055108147451509157692220295382716162651878526895249385292291816524375083746691371804094271873160484737966720260389217684476157468082573n\n};\n\nconst FNV_OFFSETS = {\n\t32: 2166136261n,\n\t64: 14695981039346656037n,\n\t128: 144066263297769815596495629667062367629n,\n\t256: 100029257958052580907070968620625704837092796014241193945225284501741471925557n,\n\t512: 9659303129496669498009435400716310466090418745672637896108374329434462657994582932197716438449813051892206539805784495328239340083876191928701583869517785n,\n\t1024: 14197795064947621068722070641403218320880622795441933960878474914617582723252296732303717722150864096521202355549365628174669108571814760471015076148029755969804077320157692458563003215304957150157403644460363550505412711285966361610267868082893823963790439336411086884584107735010676915n\n};\n\n// Legacy implementation for 32-bit + number types\nfunction fnv1a(string) {\n\t// Handle Unicode code points > 0x7f\n\tlet hash = Number(FNV_OFFSETS[32]);\n\tlet isUnicoded = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet characterCode = string.charCodeAt(i);\n\n\t\t// Non-ASCII characters trigger the Unicode escape logic\n\t\tif (characterCode > 0x7F && !isUnicoded) {\n\t\t\tstring = unescape(encodeURIComponent(string));\n\t\t\tcharacterCode = string.charCodeAt(i);\n\t\t\tisUnicoded = true;\n\t\t}\n\n\t\thash ^= characterCode;\n\t\thash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n\t}\n\n\treturn hash >>> 0;\n}\n\nfunction bigInt(string, {size = 32} = {}) {\n\tif (!FNV_PRIMES[size]) {\n\t\tthrow new Error('The `size` option must be one of 32, 64, 128, 256, 512, or 1024');\n\t}\n\n\tlet hash = FNV_OFFSETS[size];\n\tconst fnvPrime = FNV_PRIMES[size];\n\n\t// Handle Unicode code points > 0x7f\n\tlet isUnicoded = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet characterCode = string.charCodeAt(i);\n\n\t\t// Non-ASCII characters trigger the Unicode escape logic\n\t\tif (characterCode > 0x7F && !isUnicoded) {\n\t\t\tstring = unescape(encodeURIComponent(string));\n\t\t\tcharacterCode = string.charCodeAt(i);\n\t\t\tisUnicoded = true;\n\t\t}\n\n\t\thash ^= BigInt(characterCode);\n\t\thash = BigInt.asUintN(size, hash * fnvPrime);\n\t}\n\n\treturn hash;\n}\n\nmodule.exports = fnv1a;\nmodule.exports.bigInt = bigInt;\n","import { ts } from './ts';\nimport { parse, visit } from 'graphql';\n\nimport { findNode } from './ast';\n\nexport const UNUSED_FIELD_CODE = 52005;\n\nconst unwrapAbstractType = (type: ts.Type) => {\n  return type.isUnionOrIntersection()\n    ? type.types.find(type => type.flags & ts.TypeFlags.Object) || type\n    : type;\n};\n\nconst getVariableDeclaration = (\n  start: ts.Node\n): ts.VariableDeclaration | undefined => {\n  let node: ts.Node = start;\n  const seen = new Set();\n  while (node.parent && !seen.has(node)) {\n    seen.add(node);\n    if (ts.isBlock(node)) {\n      return; // NOTE: We never want to traverse up into a new function/module block\n    } else if (ts.isVariableDeclaration((node = node.parent))) {\n      return node;\n    }\n  }\n};\n\nconst traverseArrayDestructuring = (\n  node: ts.ArrayBindingPattern,\n  originalWip: Array<string>,\n  allFields: Array<string>,\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo\n): Array<string> => {\n  return node.elements.flatMap(element => {\n    if (ts.isOmittedExpression(element)) return [];\n\n    const wip = [...originalWip];\n    return ts.isIdentifier(element.name)\n      ? crawlScope(element.name, wip, allFields, source, info, false)\n      : ts.isObjectBindingPattern(element.name)\n      ? traverseDestructuring(element.name, wip, allFields, source, info)\n      : traverseArrayDestructuring(element.name, wip, allFields, source, info);\n  });\n};\n\nconst traverseDestructuring = (\n  node: ts.ObjectBindingPattern,\n  originalWip: Array<string>,\n  allFields: Array<string>,\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo\n): Array<string> => {\n  const results = [];\n  for (const binding of node.elements) {\n    if (ts.isObjectBindingPattern(binding.name)) {\n      const wip = [...originalWip];\n      if (\n        binding.propertyName &&\n        !originalWip.includes(binding.propertyName.getText())\n      ) {\n        const joined = [...wip, binding.propertyName.getText()].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          wip.push(binding.propertyName.getText());\n        }\n      }\n      const traverseResult = traverseDestructuring(\n        binding.name,\n        wip,\n        allFields,\n        source,\n        info\n      );\n\n      results.push(...traverseResult);\n    } else if (ts.isIdentifier(binding.name)) {\n      const wip = [...originalWip];\n      if (\n        binding.propertyName &&\n        !originalWip.includes(binding.propertyName.getText())\n      ) {\n        const joined = [...wip, binding.propertyName.getText()].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          wip.push(binding.propertyName.getText());\n        }\n      } else {\n        const joined = [...wip, binding.name.getText()].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          wip.push(binding.name.getText());\n        }\n      }\n\n      const crawlResult = crawlScope(\n        binding.name,\n        wip,\n        allFields,\n        source,\n        info,\n        false\n      );\n\n      results.push(...crawlResult);\n    }\n  }\n\n  return results;\n};\n\nconst arrayMethods = new Set([\n  'map',\n  'filter',\n  'forEach',\n  'reduce',\n  'every',\n  'some',\n  'find',\n  'flatMap',\n  'sort',\n]);\n\nconst crawlScope = (\n  node: ts.BindingName,\n  originalWip: Array<string>,\n  allFields: Array<string>,\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo,\n  inArrayMethod: boolean\n): Array<string> => {\n  if (ts.isObjectBindingPattern(node)) {\n    return traverseDestructuring(node, originalWip, allFields, source, info);\n  } else if (ts.isArrayBindingPattern(node)) {\n    return traverseArrayDestructuring(\n      node,\n      originalWip,\n      allFields,\n      source,\n      info\n    );\n  }\n\n  let results: string[] = [];\n\n  const references = info.languageService.getReferencesAtPosition(\n    source.fileName,\n    node.getStart()\n  );\n\n  if (!references) return results;\n\n  // Go over all the references tied to the result of\n  // accessing our equery and collect them as fully\n  // qualified paths (ideally ending in a leaf-node)\n  results = references.flatMap(ref => {\n    // If we get a reference to a different file we can bail\n    if (ref.fileName !== source.fileName) return [];\n    // We don't want to end back at our document so we narrow\n    // the scope.\n    if (\n      node.getStart() <= ref.textSpan.start &&\n      node.getEnd() >= ref.textSpan.start + ref.textSpan.length\n    )\n      return [];\n\n    let foundRef = findNode(source, ref.textSpan.start);\n    if (!foundRef) return [];\n\n    const pathParts = [...originalWip];\n    // In here we'll start crawling all the accessors of result\n    // and try to determine the total path\n    // - result.data.pokemon.name --> pokemon.name this is the easy route and never accesses\n    //   any of the recursive functions\n    // - const pokemon = result.data.pokemon --> this initiates a new crawl with a renewed scope\n    // - const { pokemon } = result.data --> this initiates a destructuring traversal which will\n    //   either end up in more destructuring traversals or a scope crawl\n    while (\n      ts.isIdentifier(foundRef) ||\n      ts.isPropertyAccessExpression(foundRef) ||\n      ts.isElementAccessExpression(foundRef) ||\n      ts.isVariableDeclaration(foundRef) ||\n      ts.isBinaryExpression(foundRef) ||\n      ts.isReturnStatement(foundRef) ||\n      ts.isArrowFunction(foundRef)\n    ) {\n      if (\n        !inArrayMethod &&\n        (ts.isReturnStatement(foundRef) || ts.isArrowFunction(foundRef))\n      ) {\n        // When we are returning the ref or we are dealing with an implicit return\n        // we mark all its children as used (bail scenario)\n        const joined = pathParts.join('.');\n        const bailedFields = allFields.filter(x => x.startsWith(joined + '.'));\n        return bailedFields;\n      } else if (ts.isVariableDeclaration(foundRef)) {\n        return crawlScope(\n          foundRef.name,\n          pathParts,\n          allFields,\n          source,\n          info,\n          false\n        );\n      } else if (\n        ts.isIdentifier(foundRef) &&\n        !pathParts.includes(foundRef.text)\n      ) {\n        const joined = [...pathParts, foundRef.text].join('.');\n        if (allFields.find(x => x.startsWith(joined + '.'))) {\n          pathParts.push(foundRef.text);\n        }\n      } else if (\n        ts.isPropertyAccessExpression(foundRef) &&\n        foundRef.name.text === 'at' &&\n        ts.isCallExpression(foundRef.parent)\n      ) {\n        foundRef = foundRef.parent;\n      } else if (\n        ts.isPropertyAccessExpression(foundRef) &&\n        arrayMethods.has(foundRef.name.text) &&\n        ts.isCallExpression(foundRef.parent)\n      ) {\n        const isReduce = foundRef.name.text === 'reduce';\n        const isSomeOrEvery =\n          foundRef.name.text === 'every' || foundRef.name.text === 'some';\n        const callExpression = foundRef.parent;\n        let func: ts.Expression | ts.FunctionDeclaration =\n          callExpression.arguments[0];\n\n        if (ts.isIdentifier(func)) {\n          // TODO: Scope utilities in checkFieldUsageInFile to deduplicate\n          const checker = info.languageService.getProgram()!.getTypeChecker();\n\n          const declaration =\n            checker.getSymbolAtLocation(func)?.valueDeclaration;\n          if (declaration && ts.isFunctionDeclaration(declaration)) {\n            func = declaration;\n          } else if (\n            declaration &&\n            ts.isVariableDeclaration(declaration) &&\n            declaration.initializer\n          ) {\n            func = declaration.initializer;\n          }\n        }\n\n        if (\n          ts.isFunctionDeclaration(func) ||\n          ts.isFunctionExpression(func) ||\n          ts.isArrowFunction(func)\n        ) {\n          const param = func.parameters[isReduce ? 1 : 0];\n          const res = crawlScope(\n            param.name,\n            pathParts,\n            allFields,\n            source,\n            info,\n            true\n          );\n\n          if (\n            ts.isVariableDeclaration(callExpression.parent) &&\n            !isSomeOrEvery\n          ) {\n            const varRes = crawlScope(\n              callExpression.parent.name,\n              pathParts,\n              allFields,\n              source,\n              info,\n              true\n            );\n            res.push(...varRes);\n          }\n\n          return res;\n        }\n      } else if (\n        ts.isPropertyAccessExpression(foundRef) &&\n        !pathParts.includes(foundRef.name.text)\n      ) {\n        const joined = [...pathParts, foundRef.name.text].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          pathParts.push(foundRef.name.text);\n        }\n      } else if (\n        ts.isElementAccessExpression(foundRef) &&\n        ts.isStringLiteral(foundRef.argumentExpression) &&\n        !pathParts.includes(foundRef.argumentExpression.text)\n      ) {\n        const joined = [...pathParts, foundRef.argumentExpression.text].join(\n          '.'\n        );\n        if (allFields.find(x => x.startsWith(joined))) {\n          pathParts.push(foundRef.argumentExpression.text);\n        }\n      }\n\n      if (ts.isNonNullExpression(foundRef.parent)) {\n        foundRef = foundRef.parent.parent;\n      } else {\n        foundRef = foundRef.parent;\n      }\n    }\n\n    return pathParts.join('.');\n  });\n\n  return results;\n};\n\nexport const checkFieldUsageInFile = (\n  source: ts.SourceFile,\n  nodes: ts.NoSubstitutionTemplateLiteral[],\n  info: ts.server.PluginCreateInfo\n) => {\n  const diagnostics: ts.Diagnostic[] = [];\n  const shouldTrackFieldUsage = info.config.trackFieldUsage ?? true;\n  if (!shouldTrackFieldUsage) return diagnostics;\n\n  const defaultReservedKeys = ['id', '_id', '__typename'];\n  const additionalKeys = info.config.reservedKeys ?? [];\n  const reservedKeys = new Set([...defaultReservedKeys, ...additionalKeys]);\n  const checker = info.languageService.getProgram()?.getTypeChecker();\n  if (!checker) return;\n\n  try {\n    nodes.forEach(node => {\n      const nodeText = node.getText();\n      // Bailing for mutations/subscriptions as these could have small details\n      // for normalised cache interactions\n      if (nodeText.includes('mutation') || nodeText.includes('subscription'))\n        return;\n\n      const variableDeclaration = getVariableDeclaration(node);\n      if (!variableDeclaration) return;\n\n      let dataType: ts.Type | undefined;\n\n      const type = checker.getTypeAtLocation(node.parent) as\n        | ts.TypeReference\n        | ts.Type;\n      // Attempt to retrieve type from internally resolve type arguments\n      if ('target' in type) {\n        const typeArguments = (type as any)\n          .resolvedTypeArguments as readonly ts.Type[];\n        dataType =\n          typeArguments && typeArguments.length > 1\n            ? typeArguments[0]\n            : undefined;\n      }\n      // Fallback to resolving the type from scratch\n      if (!dataType) {\n        const apiTypeSymbol = type.getProperty('__apiType');\n        if (apiTypeSymbol) {\n          let apiType = checker.getTypeOfSymbol(apiTypeSymbol);\n          let callSignature: ts.Signature | undefined =\n            type.getCallSignatures()[0];\n          if (apiType.isUnionOrIntersection()) {\n            for (const type of apiType.types) {\n              callSignature = type.getCallSignatures()[0];\n              if (callSignature) {\n                dataType = callSignature.getReturnType();\n                break;\n              }\n            }\n          }\n          dataType = callSignature && callSignature.getReturnType();\n        }\n      }\n\n      const references = info.languageService.getReferencesAtPosition(\n        source.fileName,\n        variableDeclaration.name.getStart()\n      );\n\n      if (!references) return;\n\n      const allAccess: string[] = [];\n      const inProgress: string[] = [];\n      const allPaths: string[] = [];\n      const fieldToLoc = new Map<string, { start: number; length: number }>();\n      // This visitor gets all the leaf-paths in the document\n      // as well as all fields that are part of the document\n      // We need the leaf-paths to check usage and we need the\n      // fields to validate whether an access on a given reference\n      // is valid given the current document...\n      visit(parse(node.getText().slice(1, -1)), {\n        Field: {\n          enter(node) {\n            const alias = node.alias ? node.alias.value : node.name.value;\n            const path = inProgress.length\n              ? `${inProgress.join('.')}.${alias}`\n              : alias;\n\n            if (!node.selectionSet && !reservedKeys.has(node.name.value)) {\n              allPaths.push(path);\n              fieldToLoc.set(path, {\n                start: node.name.loc!.start,\n                length: node.name.loc!.end - node.name.loc!.start,\n              });\n            } else if (node.selectionSet) {\n              inProgress.push(alias);\n              fieldToLoc.set(path, {\n                start: node.name.loc!.start,\n                length: node.name.loc!.end - node.name.loc!.start,\n              });\n            }\n          },\n          leave(node) {\n            if (node.selectionSet) {\n              inProgress.pop();\n            }\n          },\n        },\n      });\n\n      references.forEach(ref => {\n        if (ref.fileName !== source.fileName) return;\n\n        const targetNode = findNode(source, ref.textSpan.start);\n        if (!targetNode) return;\n        // Skip declaration as reference of itself\n        if (targetNode.parent === variableDeclaration) return;\n\n        const scopeSymbols = checker.getSymbolsInScope(\n          targetNode,\n          ts.SymbolFlags.BlockScopedVariable\n        );\n\n        let scopeDataSymbol: ts.Symbol | undefined;\n        for (let scopeSymbol of scopeSymbols) {\n          if (!scopeSymbol.valueDeclaration) continue;\n          let typeOfScopeSymbol = unwrapAbstractType(\n            checker.getTypeOfSymbol(scopeSymbol)\n          );\n          if (dataType === typeOfScopeSymbol) {\n            scopeDataSymbol = scopeSymbol;\n            break;\n          }\n\n          // NOTE: This is an aggressive fallback for hooks where the return value isn't destructured\n          // This is a last resort solution for patterns like react-query, where the fallback that\n          // would otherwise happen below isn't sufficient\n          if (typeOfScopeSymbol.flags & ts.TypeFlags.Object) {\n            const tuplePropertySymbol = typeOfScopeSymbol.getProperty('0');\n            if (tuplePropertySymbol) {\n              typeOfScopeSymbol = checker.getTypeOfSymbol(tuplePropertySymbol);\n              if (dataType === typeOfScopeSymbol) {\n                scopeDataSymbol = scopeSymbol;\n                break;\n              }\n            }\n\n            const dataPropertySymbol = typeOfScopeSymbol.getProperty('data');\n            if (dataPropertySymbol) {\n              typeOfScopeSymbol = unwrapAbstractType(\n                checker.getTypeOfSymbol(dataPropertySymbol)\n              );\n              if (dataType === typeOfScopeSymbol) {\n                scopeDataSymbol = scopeSymbol;\n                break;\n              }\n            }\n          }\n        }\n\n        const valueDeclaration = scopeDataSymbol?.valueDeclaration;\n        let name: ts.BindingName | undefined;\n        if (\n          valueDeclaration &&\n          'name' in valueDeclaration &&\n          !!valueDeclaration.name &&\n          (ts.isIdentifier(valueDeclaration.name as any) ||\n            ts.isBindingName(valueDeclaration.name as any))\n        ) {\n          name = valueDeclaration.name as ts.BindingName;\n        } else {\n          // Fall back to looking at the variable declaration directly,\n          // if we are on one.\n          const variableDeclaration = getVariableDeclaration(targetNode);\n          if (variableDeclaration) name = variableDeclaration.name;\n        }\n\n        if (name) {\n          const result = crawlScope(name, [], allPaths, source, info, false);\n          allAccess.push(...result);\n        }\n      });\n\n      if (!allAccess.length) {\n        return;\n      }\n\n      const unused = allPaths.filter(x => !allAccess.includes(x));\n      const aggregatedUnusedFields = new Set<string>();\n      const unusedChildren: { [key: string]: Set<string> } = {};\n      const unusedFragmentLeaf = new Set<string>();\n      unused.forEach(unusedField => {\n        const split = unusedField.split('.');\n        split.pop();\n        const parentField = split.join('.');\n        const loc = fieldToLoc.get(parentField);\n\n        if (loc) {\n          aggregatedUnusedFields.add(parentField);\n          if (unusedChildren[parentField]) {\n            unusedChildren[parentField].add(unusedField);\n          } else {\n            unusedChildren[parentField] = new Set([unusedField]);\n          }\n        } else {\n          unusedFragmentLeaf.add(unusedField);\n        }\n      });\n\n      aggregatedUnusedFields.forEach(field => {\n        const loc = fieldToLoc.get(field)!;\n        const unusedFields = unusedChildren[field]!;\n        diagnostics.push({\n          file: source,\n          length: loc.length,\n          start: node.getStart() + loc.start + 1,\n          category: ts.DiagnosticCategory.Warning,\n          code: UNUSED_FIELD_CODE,\n          messageText: `Field(s) ${[...unusedFields]\n            .map(x => `'${x}'`)\n            .join(', ')} are not used.`,\n        });\n      });\n\n      unusedFragmentLeaf.forEach(field => {\n        const loc = fieldToLoc.get(field)!;\n        diagnostics.push({\n          file: source,\n          length: loc.length,\n          start: node.getStart() + loc.start + 1,\n          category: ts.DiagnosticCategory.Warning,\n          code: UNUSED_FIELD_CODE,\n          messageText: `Field ${field} is not used.`,\n        });\n      });\n    });\n  } catch (e: any) {\n    console.error('[GraphQLSP]: ', e.message, e.stack);\n  }\n\n  return diagnostics;\n};\n","import { ts } from './ts';\nimport { FragmentDefinitionNode, Kind, parse } from 'graphql';\n\nimport { findAllCallExpressions, findAllImports, getSource } from './ast';\nimport { resolveTemplate } from './ast/resolve';\nimport {\n  VariableDeclaration,\n  VariableStatement,\n  isSourceFile,\n} from 'typescript';\n\nexport const MISSING_FRAGMENT_CODE = 52003;\n\nexport const getColocatedFragmentNames = (\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo\n): Record<\n  string,\n  { start: number; length: number; fragments: Array<string> }\n> => {\n  const imports = findAllImports(source);\n  const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n\n  const importSpecifierToFragments: Record<\n    string,\n    { start: number; length: number; fragments: Array<string> }\n  > = {};\n\n  if (!typeChecker) return importSpecifierToFragments;\n\n  if (imports.length) {\n    imports.forEach(imp => {\n      if (!imp.importClause) return;\n\n      if (imp.importClause.name) {\n        const definitions = info.languageService.getDefinitionAtPosition(\n          source.fileName,\n          imp.importClause.name.getStart()\n        );\n        if (definitions && definitions.length) {\n          const [def] = definitions;\n          if (def.fileName.includes('node_modules')) return;\n\n          const externalSource = getSource(info, def.fileName);\n          if (!externalSource) return;\n\n          const fragmentsForImport = getFragmentsInSource(\n            externalSource,\n            typeChecker,\n            info\n          );\n\n          const names = fragmentsForImport.map(fragment => fragment.name.value);\n          if (\n            names.length &&\n            !importSpecifierToFragments[imp.moduleSpecifier.getText()]\n          ) {\n            importSpecifierToFragments[imp.moduleSpecifier.getText()] = {\n              start: imp.moduleSpecifier.getStart(),\n              length: imp.moduleSpecifier.getText().length,\n              fragments: names,\n            };\n          } else if (names.length) {\n            importSpecifierToFragments[\n              imp.moduleSpecifier.getText()\n            ].fragments =\n              importSpecifierToFragments[\n                imp.moduleSpecifier.getText()\n              ].fragments.concat(names);\n          }\n        }\n      }\n\n      if (\n        imp.importClause.namedBindings &&\n        ts.isNamespaceImport(imp.importClause.namedBindings)\n      ) {\n        const definitions = info.languageService.getDefinitionAtPosition(\n          source.fileName,\n          imp.importClause.namedBindings.getStart()\n        );\n        if (definitions && definitions.length) {\n          const [def] = definitions;\n          if (def.fileName.includes('node_modules')) return;\n\n          const externalSource = getSource(info, def.fileName);\n          if (!externalSource) return;\n\n          const fragmentsForImport = getFragmentsInSource(\n            externalSource,\n            typeChecker,\n            info\n          );\n          const names = fragmentsForImport.map(fragment => fragment.name.value);\n          if (\n            names.length &&\n            !importSpecifierToFragments[imp.moduleSpecifier.getText()]\n          ) {\n            importSpecifierToFragments[imp.moduleSpecifier.getText()] = {\n              start: imp.moduleSpecifier.getStart(),\n              length: imp.moduleSpecifier.getText().length,\n              fragments: names,\n            };\n          } else if (names.length) {\n            importSpecifierToFragments[\n              imp.moduleSpecifier.getText()\n            ].fragments =\n              importSpecifierToFragments[\n                imp.moduleSpecifier.getText()\n              ].fragments.concat(names);\n          }\n        }\n      } else if (\n        imp.importClause.namedBindings &&\n        ts.isNamedImportBindings(imp.importClause.namedBindings)\n      ) {\n        imp.importClause.namedBindings.elements.forEach(el => {\n          const definitions = info.languageService.getDefinitionAtPosition(\n            source.fileName,\n            el.getStart()\n          );\n          if (definitions && definitions.length) {\n            const [def] = definitions;\n            if (def.fileName.includes('node_modules')) return;\n\n            const externalSource = getSource(info, def.fileName);\n            if (!externalSource) return;\n\n            const fragmentsForImport = getFragmentsInSource(\n              externalSource,\n              typeChecker,\n              info\n            );\n            const names = fragmentsForImport.map(\n              fragment => fragment.name.value\n            );\n            if (\n              names.length &&\n              !importSpecifierToFragments[imp.moduleSpecifier.getText()]\n            ) {\n              importSpecifierToFragments[imp.moduleSpecifier.getText()] = {\n                start: imp.moduleSpecifier.getStart(),\n                length: imp.moduleSpecifier.getText().length,\n                fragments: names,\n              };\n            } else if (names.length) {\n              importSpecifierToFragments[\n                imp.moduleSpecifier.getText()\n              ].fragments =\n                importSpecifierToFragments[\n                  imp.moduleSpecifier.getText()\n                ].fragments.concat(names);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  return importSpecifierToFragments;\n};\n\nfunction getFragmentsInSource(\n  src: ts.SourceFile,\n  typeChecker: ts.TypeChecker,\n  info: ts.server.PluginCreateInfo\n): Array<FragmentDefinitionNode> {\n  let fragments: Array<FragmentDefinitionNode> = [];\n  const callExpressions = findAllCallExpressions(src, info, false);\n\n  const symbol = typeChecker.getSymbolAtLocation(src);\n  if (!symbol) return [];\n\n  const exports = typeChecker.getExportsOfModule(symbol);\n  const exportedNames = exports.map(symb => symb.name);\n  const nodes = callExpressions.nodes.filter(x => {\n    let parent = x.node.parent;\n    while (\n      parent &&\n      !ts.isSourceFile(parent) &&\n      !ts.isVariableDeclaration(parent)\n    ) {\n      parent = parent.parent;\n    }\n\n    if (ts.isVariableDeclaration(parent)) {\n      return exportedNames.includes(parent.name.getText());\n    } else {\n      return false;\n    }\n  });\n\n  nodes.forEach(node => {\n    const text = resolveTemplate(node.node, src.fileName, info).combinedText;\n    try {\n      const parsed = parse(text, { noLocation: true });\n      if (parsed.definitions.every(x => x.kind === Kind.FRAGMENT_DEFINITION)) {\n        fragments = fragments.concat(parsed.definitions as any);\n      }\n    } catch (e) {\n      return;\n    }\n  });\n\n  return fragments;\n}\n","import { ts } from './ts';\n\nimport { createHash } from 'crypto';\n\nimport * as checks from './ast/checks';\nimport { findAllCallExpressions, findNode, getSource } from './ast';\nimport { resolveTemplate } from './ast/resolve';\nimport { parse, print, visit } from '@0no-co/graphql.web';\n\ntype PersistedAction = {\n  span: {\n    start: number;\n    length: number;\n  };\n  replacement: string;\n};\n\nexport function getPersistedCodeFixAtPosition(\n  filename: string,\n  position: number,\n  info: ts.server.PluginCreateInfo\n): PersistedAction | undefined {\n  const isCallExpression = info.config.templateIsCallExpression ?? true;\n  const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n  if (!isCallExpression) return undefined;\n\n  let source = getSource(info, filename);\n  if (!source) return undefined;\n\n  const node = findNode(source, position);\n  if (!node) return undefined;\n\n  let callExpression: ts.Node = node;\n  // We found a node and need to check where on the path we are\n  // we expect this to look a little bit like\n  // const persistedDoc = graphql.persisted<typeof x>()\n  // When we are on the left half of this statement we bubble down\n  // looking for the correct call-expression and on the right hand\n  // we bubble up.\n  if (ts.isVariableStatement(callExpression)) {\n    callExpression =\n      callExpression.declarationList.declarations.find(declaration => {\n        return (\n          ts.isVariableDeclaration(declaration) &&\n          declaration.initializer &&\n          ts.isCallExpression(declaration.initializer)\n        );\n      }) || node;\n  } else if (ts.isVariableDeclarationList(callExpression)) {\n    callExpression =\n      callExpression.declarations.find(declaration => {\n        return (\n          ts.isVariableDeclaration(declaration) &&\n          declaration.initializer &&\n          ts.isCallExpression(declaration.initializer)\n        );\n      }) || node;\n  } else if (\n    ts.isVariableDeclaration(callExpression) &&\n    callExpression.initializer &&\n    ts.isCallExpression(callExpression.initializer)\n  ) {\n    callExpression = callExpression.initializer;\n  } else {\n    while (callExpression && !ts.isCallExpression(callExpression)) {\n      callExpression = callExpression.parent;\n    }\n  }\n\n  // We want to ensure that we found a call-expression and that it looks\n  // like \"graphql.persisted\", in a future iteration when the API surface\n  // is more defined we will need to use the ts.Symbol to support re-exporting\n  // this function by means of \"export const peristed = graphql.persisted\".\n  if (!checks.isTadaPersistedCall(callExpression, typeChecker)) {\n    return undefined;\n  }\n\n  let foundNode,\n    foundFilename = filename;\n  if (callExpression.typeArguments) {\n    const [typeQuery] = callExpression.typeArguments;\n    if (!ts.isTypeQueryNode(typeQuery)) return undefined;\n    const { node: found, filename: fileName } =\n      getDocumentReferenceFromTypeQuery(typeQuery, filename, info);\n    foundNode = found;\n    foundFilename = fileName;\n  } else if (callExpression.arguments[1]) {\n    if (\n      !ts.isIdentifier(callExpression.arguments[1]) &&\n      !ts.isCallExpression(callExpression.arguments[1])\n    )\n      return undefined;\n    const { node: found, filename: fileName } =\n      getDocumentReferenceFromDocumentNode(\n        callExpression.arguments[1],\n        filename,\n        info\n      );\n    foundNode = found;\n    foundFilename = fileName;\n  }\n\n  if (!foundNode) return undefined;\n\n  const initializer = foundNode;\n  if (\n    !initializer ||\n    !ts.isCallExpression(initializer) ||\n    !ts.isStringLiteralLike(initializer.arguments[0])\n  )\n    return undefined;\n\n  const hash = generateHashForDocument(\n    info,\n    initializer.arguments[0],\n    foundFilename\n  );\n  const existingHash = callExpression.arguments[0];\n  // We assume for now that this is either undefined or an existing string literal\n  if (!existingHash) {\n    // We have no persisted-identifier yet, suggest adding in a new one\n    return {\n      span: {\n        start: callExpression.arguments.pos,\n        length: 1,\n      },\n      replacement: `\"sha256:${hash}\")`,\n    };\n  } else if (\n    ts.isStringLiteral(existingHash) &&\n    existingHash.getText() !== `\"sha256:${hash}\"`\n  ) {\n    // We are out of sync, suggest replacing this with the updated hash\n    return {\n      span: {\n        start: existingHash.getStart(),\n        length: existingHash.end - existingHash.getStart(),\n      },\n      replacement: `\"sha256:${hash}\"`,\n    };\n  } else if (ts.isIdentifier(existingHash)) {\n    // Suggest replacing a reference with a static one\n    // this to make these easier to statically analyze\n    return {\n      span: {\n        start: existingHash.getStart(),\n        length: existingHash.end - existingHash.getStart(),\n      },\n      replacement: `\"sha256:${hash}\"`,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport const generateHashForDocument = (\n  info: ts.server.PluginCreateInfo,\n  templateLiteral: ts.StringLiteralLike | ts.TaggedTemplateExpression,\n  foundFilename: string\n): string | undefined => {\n  const externalSource = getSource(info, foundFilename)!;\n  const { fragments } = findAllCallExpressions(externalSource, info);\n\n  const text = resolveTemplate(\n    templateLiteral,\n    foundFilename,\n    info\n  ).combinedText;\n  const parsed = parse(text);\n  const spreads = new Set();\n  visit(parsed, {\n    FragmentSpread: node => {\n      spreads.add(node.name.value);\n    },\n  });\n\n  let resolvedText = text;\n  [...spreads].forEach(spreadName => {\n    const fragmentDefinition = fragments.find(x => x.name.value === spreadName);\n    if (!fragmentDefinition) {\n      info.project.projectService.logger.info(\n        `[GraphQLSP] could not find fragment for spread ${spreadName}!`\n      );\n      return;\n    }\n\n    resolvedText = `${resolvedText}\\n\\n${print(fragmentDefinition)}`;\n  });\n\n  return createHash('sha256').update(text).digest('hex');\n};\n\nexport const getDocumentReferenceFromTypeQuery = (\n  typeQuery: ts.TypeQueryNode,\n  filename: string,\n  info: ts.server.PluginCreateInfo\n): { node: ts.CallExpression | null; filename: string } => {\n  // We look for the references of the generic so that we can use the document\n  // to generate the hash.\n  const references = info.languageService.getReferencesAtPosition(\n    filename,\n    typeQuery.exprName.getStart()\n  );\n\n  if (!references) return { node: null, filename };\n\n  const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n  let found: ts.CallExpression | null = null;\n  let foundFilename = filename;\n  references.forEach(ref => {\n    if (found) return;\n\n    const source = getSource(info, ref.fileName);\n    if (!source) return;\n    const foundNode = findNode(source, ref.textSpan.start);\n    if (!foundNode) return;\n\n    if (\n      ts.isVariableDeclaration(foundNode.parent) &&\n      foundNode.parent.initializer &&\n      checks.isGraphQLCall(foundNode.parent.initializer, typeChecker)\n    ) {\n      found = foundNode.parent.initializer;\n      foundFilename = ref.fileName;\n    }\n  });\n\n  return { node: found, filename: foundFilename };\n};\n\nexport const getDocumentReferenceFromDocumentNode = (\n  documentNodeArgument: ts.Identifier | ts.CallExpression,\n  filename: string,\n  info: ts.server.PluginCreateInfo\n): { node: ts.CallExpression | null; filename: string } => {\n  if (ts.isIdentifier(documentNodeArgument)) {\n    // We look for the references of the generic so that we can use the document\n    // to generate the hash.\n    const references = info.languageService.getReferencesAtPosition(\n      filename,\n      documentNodeArgument.getStart()\n    );\n\n    if (!references) return { node: null, filename };\n\n    const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n    let found: ts.CallExpression | null = null;\n    let foundFilename = filename;\n    references.forEach(ref => {\n      if (found) return;\n\n      const source = getSource(info, ref.fileName);\n      if (!source) return;\n      const foundNode = findNode(source, ref.textSpan.start);\n      if (!foundNode) return;\n\n      if (\n        ts.isVariableDeclaration(foundNode.parent) &&\n        foundNode.parent.initializer &&\n        checks.isGraphQLCall(foundNode.parent.initializer, typeChecker)\n      ) {\n        found = foundNode.parent.initializer;\n        foundFilename = ref.fileName;\n      }\n    });\n\n    return { node: found, filename: foundFilename };\n  } else {\n    return { node: documentNodeArgument, filename };\n  }\n};\n","import { ts } from './ts';\nimport { Diagnostic, getDiagnostics } from 'graphql-language-service';\nimport {\n  FragmentDefinitionNode,\n  GraphQLSchema,\n  Kind,\n  OperationDefinitionNode,\n  parse,\n  visit,\n} from 'graphql';\nimport { LRUCache } from 'lru-cache';\nimport fnv1a from '@sindresorhus/fnv1a';\nimport { print } from '@0no-co/graphql.web';\n\nimport {\n  findAllCallExpressions,\n  findAllPersistedCallExpressions,\n  findAllTaggedTemplateNodes,\n  getSource,\n} from './ast';\nimport { resolveTemplate } from './ast/resolve';\nimport { UNUSED_FIELD_CODE, checkFieldUsageInFile } from './fieldUsage';\nimport {\n  MISSING_FRAGMENT_CODE,\n  getColocatedFragmentNames,\n} from './checkImports';\nimport {\n  generateHashForDocument,\n  getDocumentReferenceFromDocumentNode,\n  getDocumentReferenceFromTypeQuery,\n} from './persisted';\nimport { SchemaRef } from './graphql/getSchema';\n\nconst clientDirectives = new Set([\n  'populate',\n  'client',\n  '_unmask',\n  '_optional',\n  '_relayPagination',\n  '_simplePagination',\n  '_required',\n  'optional',\n  'required',\n  'arguments',\n  'argumentDefinitions',\n  'connection',\n  'refetchable',\n  'relay',\n  'required',\n  'inline',\n]);\n\nexport const SEMANTIC_DIAGNOSTIC_CODE = 52001;\nexport const MISSING_OPERATION_NAME_CODE = 52002;\nexport const USING_DEPRECATED_FIELD_CODE = 52004;\nexport const MISSING_PERSISTED_TYPE_ARG = 520100;\nexport const MISSING_PERSISTED_CODE_ARG = 520101;\nexport const MISSING_PERSISTED_DOCUMENT = 520102;\nexport const MISSMATCH_HASH_TO_DOCUMENT = 520103;\nexport const ALL_DIAGNOSTICS = [\n  SEMANTIC_DIAGNOSTIC_CODE,\n  MISSING_OPERATION_NAME_CODE,\n  USING_DEPRECATED_FIELD_CODE,\n  MISSING_FRAGMENT_CODE,\n  UNUSED_FIELD_CODE,\n  MISSING_PERSISTED_TYPE_ARG,\n  MISSING_PERSISTED_CODE_ARG,\n  MISSING_PERSISTED_DOCUMENT,\n  MISSMATCH_HASH_TO_DOCUMENT,\n];\n\nconst cache = new LRUCache<number, ts.Diagnostic[]>({\n  // how long to live in ms\n  ttl: 1000 * 60 * 15,\n  max: 5000,\n});\n\nexport function getGraphQLDiagnostics(\n  filename: string,\n  schema: SchemaRef,\n  info: ts.server.PluginCreateInfo\n): ts.Diagnostic[] | undefined {\n  const isCallExpression = info.config.templateIsCallExpression ?? true;\n\n  let source = getSource(info, filename);\n  if (!source) return undefined;\n\n  let fragments: Array<FragmentDefinitionNode> = [],\n    nodes: {\n      node: ts.StringLiteralLike | ts.TaggedTemplateExpression;\n      schema: string | null;\n    }[];\n  if (isCallExpression) {\n    const result = findAllCallExpressions(source, info);\n    fragments = result.fragments;\n    nodes = result.nodes;\n  } else {\n    nodes = findAllTaggedTemplateNodes(source).map(x => ({\n      node: x,\n      schema: null,\n    }));\n  }\n\n  const texts = nodes.map(({ node }) => {\n    if (\n      (ts.isNoSubstitutionTemplateLiteral(node) ||\n        ts.isTemplateExpression(node)) &&\n      !isCallExpression\n    ) {\n      if (ts.isTaggedTemplateExpression(node.parent)) {\n        node = node.parent;\n      } else {\n        return undefined;\n      }\n    }\n\n    return resolveTemplate(node, filename, info).combinedText;\n  });\n\n  const cacheKey = fnv1a(\n    isCallExpression\n      ? source.getText() +\n          fragments.map(x => print(x)).join('-') +\n          schema.version\n      : texts.join('-') + schema.version\n  );\n\n  let tsDiagnostics;\n  if (cache.has(cacheKey)) {\n    tsDiagnostics = cache.get(cacheKey)!;\n  } else {\n    tsDiagnostics = runDiagnostics(source, { nodes, fragments }, schema, info);\n    cache.set(cacheKey, tsDiagnostics);\n  }\n\n  const shouldCheckForColocatedFragments =\n    info.config.shouldCheckForColocatedFragments ?? true;\n  let fragmentDiagnostics: ts.Diagnostic[] = [];\n\n  if (isCallExpression) {\n    const persistedCalls = findAllPersistedCallExpressions(source, info);\n    // We need to check whether the user has correctly inserted a hash,\n    // by means of providing an argument to the function and that they\n    // are establishing a reference to the document by means of the generic.\n    const persistedDiagnostics = persistedCalls\n      .map<ts.Diagnostic | null>(found => {\n        const { node: callExpression } = found;\n        if (!callExpression.typeArguments && !callExpression.arguments[1]) {\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_TYPE_ARG,\n            file: source,\n            messageText: 'Missing generic pointing at the GraphQL document.',\n            start: callExpression.getStart(),\n            length: callExpression.getEnd() - callExpression.getStart(),\n          };\n        }\n\n        let foundNode,\n          foundFilename = filename,\n          ref,\n          start,\n          length;\n        if (callExpression.typeArguments) {\n          const [typeQuery] = callExpression.typeArguments;\n          start = typeQuery.getStart();\n          length = typeQuery.getEnd() - typeQuery.getStart();\n\n          if (!ts.isTypeQueryNode(typeQuery)) {\n            return {\n              category: ts.DiagnosticCategory.Warning,\n              code: MISSING_PERSISTED_TYPE_ARG,\n              file: source,\n              messageText:\n                'Provided generic should be a typeQueryNode in the shape of graphql.persisted<typeof document>.',\n              start,\n              length,\n            };\n          }\n          const { node: found, filename: fileName } =\n            getDocumentReferenceFromTypeQuery(typeQuery, filename, info);\n          foundNode = found;\n          foundFilename = fileName;\n          ref = typeQuery.getText();\n        } else if (callExpression.arguments[1]) {\n          start = callExpression.arguments[1].getStart();\n          length =\n            callExpression.arguments[1].getEnd() -\n            callExpression.arguments[1].getStart();\n          if (\n            !ts.isIdentifier(callExpression.arguments[1]) &&\n            !ts.isCallExpression(callExpression.arguments[1])\n          ) {\n            return {\n              category: ts.DiagnosticCategory.Warning,\n              code: MISSING_PERSISTED_TYPE_ARG,\n              file: source,\n              messageText:\n                'Provided argument should be an identifier or invocation of \"graphql\" in the shape of graphql.persisted(hash, document).',\n              start,\n              length,\n            };\n          }\n\n          const { node: found, filename: fileName } =\n            getDocumentReferenceFromDocumentNode(\n              callExpression.arguments[1],\n              filename,\n              info\n            );\n          foundNode = found;\n          foundFilename = fileName;\n          ref = callExpression.arguments[1].getText();\n        }\n\n        if (!foundNode) {\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_DOCUMENT,\n            file: source,\n            messageText: `Can't find reference to \"${ref}\".`,\n            start,\n            length,\n          };\n        }\n\n        const initializer = foundNode;\n        if (\n          !initializer ||\n          !ts.isCallExpression(initializer) ||\n          !ts.isStringLiteralLike(initializer.arguments[0])\n        ) {\n          // TODO: we can make this check more stringent where we also parse and resolve\n          // the accompanying template.\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_DOCUMENT,\n            file: source,\n            messageText: `Referenced type \"${ref}\" is not a GraphQL document.`,\n            start,\n            length,\n          };\n        }\n\n        if (!callExpression.arguments[0]) {\n          // TODO: this might be covered by the API enforcing the first\n          // argument so can possibly be removed.\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_CODE_ARG,\n            file: source,\n            messageText: `The call-expression is missing a hash for the persisted argument.`,\n            start: callExpression.arguments.pos,\n            length: callExpression.arguments.end - callExpression.arguments.pos,\n          };\n        }\n\n        const hash = callExpression.arguments[0].getText().slice(1, -1);\n        if (hash.startsWith('sha256:')) {\n          const generatedHash = generateHashForDocument(\n            info,\n            initializer.arguments[0],\n            foundFilename\n          );\n          if (!generatedHash) return null;\n\n          const upToDateHash = `sha256:${generatedHash}`;\n          if (upToDateHash !== hash) {\n            return {\n              category: ts.DiagnosticCategory.Warning,\n              code: MISSMATCH_HASH_TO_DOCUMENT,\n              file: source,\n              messageText: `The persisted document's hash is outdated`,\n              start: callExpression.arguments.pos,\n              length:\n                callExpression.arguments.end - callExpression.arguments.pos,\n            };\n          }\n        }\n\n        return null;\n      })\n      .filter(Boolean);\n\n    tsDiagnostics.push(...(persistedDiagnostics as ts.Diagnostic[]));\n  }\n\n  if (isCallExpression && shouldCheckForColocatedFragments) {\n    const moduleSpecifierToFragments = getColocatedFragmentNames(source, info);\n\n    const usedFragments = new Set();\n    nodes.forEach(({ node }) => {\n      try {\n        const parsed = parse(node.getText().slice(1, -1), {\n          noLocation: true,\n        });\n        visit(parsed, {\n          FragmentSpread: node => {\n            usedFragments.add(node.name.value);\n          },\n        });\n      } catch (e) {}\n    });\n\n    Object.keys(moduleSpecifierToFragments).forEach(moduleSpecifier => {\n      const {\n        fragments: fragmentNames,\n        start,\n        length,\n      } = moduleSpecifierToFragments[moduleSpecifier];\n      const missingFragments = Array.from(\n        new Set(fragmentNames.filter(x => !usedFragments.has(x)))\n      );\n      if (missingFragments.length) {\n        fragmentDiagnostics.push({\n          file: source,\n          length,\n          start,\n          category: ts.DiagnosticCategory.Warning,\n          code: MISSING_FRAGMENT_CODE,\n          messageText: `Unused co-located fragment definition(s) \"${missingFragments.join(\n            ', '\n          )}\" in ${moduleSpecifier}`,\n        });\n      }\n    });\n\n    return [...tsDiagnostics, ...fragmentDiagnostics];\n  } else {\n    return tsDiagnostics;\n  }\n}\n\nconst runDiagnostics = (\n  source: ts.SourceFile,\n  {\n    nodes,\n    fragments,\n  }: {\n    nodes: {\n      node: ts.TaggedTemplateExpression | ts.StringLiteralLike;\n      schema: string | null;\n    }[];\n    fragments: FragmentDefinitionNode[];\n  },\n  schema: SchemaRef,\n  info: ts.server.PluginCreateInfo\n) => {\n  const filename = source.fileName;\n  const isCallExpression = info.config.templateIsCallExpression ?? true;\n\n  const diagnostics = nodes\n    .map(originalNode => {\n      let node = originalNode.node;\n      if (\n        !isCallExpression &&\n        (ts.isNoSubstitutionTemplateLiteral(node) ||\n          ts.isTemplateExpression(node))\n      ) {\n        if (ts.isTaggedTemplateExpression(node.parent)) {\n          node = node.parent;\n        } else {\n          return undefined;\n        }\n      }\n\n      const { combinedText: text, resolvedSpans } = resolveTemplate(\n        node,\n        filename,\n        info\n      );\n      const lines = text.split('\\n');\n\n      let isExpression = false;\n      if (ts.isAsExpression(node.parent)) {\n        if (ts.isExpressionStatement(node.parent.parent)) {\n          isExpression = true;\n        }\n      } else if (ts.isExpressionStatement(node.parent)) {\n        isExpression = true;\n      }\n      // When we are dealing with a plain gql statement we have to add two these can be recognised\n      // by the fact that the parent is an expressionStatement\n\n      let startingPosition =\n        node.getStart() +\n        (isCallExpression\n          ? 0\n          : (node as ts.TaggedTemplateExpression).tag.getText().length +\n            (isExpression ? 2 : 0));\n      const endPosition = startingPosition + node.getText().length;\n      let docFragments = [...fragments];\n      if (isCallExpression) {\n        try {\n          const documentFragments = parse(text, {\n            noLocation: true,\n          }).definitions.filter(x => x.kind === Kind.FRAGMENT_DEFINITION);\n          docFragments = docFragments.filter(\n            x =>\n              !documentFragments.some(\n                y =>\n                  y.kind === Kind.FRAGMENT_DEFINITION &&\n                  y.name.value === x.name.value\n              )\n          );\n        } catch (e) {}\n      }\n\n      const schemaToUse =\n        originalNode.schema && schema.multi[originalNode.schema]\n          ? schema.multi[originalNode.schema]?.schema\n          : schema.current?.schema;\n\n      if (!schemaToUse) {\n        return undefined;\n      }\n\n      const graphQLDiagnostics = getDiagnostics(\n        text,\n        schemaToUse,\n        undefined,\n        undefined,\n        docFragments\n      )\n        .filter(diag => {\n          if (!diag.message.includes('Unknown directive')) return true;\n\n          const [message] = diag.message.split('(');\n          const matches = /Unknown directive \"@([^)]+)\"/g.exec(message);\n          if (!matches) return true;\n          const directiveNmae = matches[1];\n          return !clientDirectives.has(directiveNmae);\n        })\n        .map(x => {\n          const { start, end } = x.range;\n\n          // We add the start.line to account for newline characters which are\n          // split out\n          let startChar = startingPosition + start.line;\n          for (let i = 0; i <= start.line; i++) {\n            if (i === start.line) startChar += start.character;\n            else if (lines[i]) startChar += lines[i].length;\n          }\n\n          let endChar = startingPosition + end.line;\n          for (let i = 0; i <= end.line; i++) {\n            if (i === end.line) endChar += end.character;\n            else if (lines[i]) endChar += lines[i].length;\n          }\n\n          const locatedInFragment = resolvedSpans.find(x => {\n            const newEnd = x.new.start + x.new.length;\n            return startChar >= x.new.start && endChar <= newEnd;\n          });\n\n          if (!!locatedInFragment) {\n            return {\n              ...x,\n              start: locatedInFragment.original.start,\n              length: locatedInFragment.original.length,\n            };\n          } else {\n            if (startChar > endPosition) {\n              // we have to calculate the added length and fix this\n              const addedCharacters = resolvedSpans\n                .filter(x => x.new.start + x.new.length < startChar)\n                .reduce(\n                  (acc, span) => acc + (span.new.length - span.original.length),\n                  0\n                );\n              startChar = startChar - addedCharacters;\n              endChar = endChar - addedCharacters;\n              return {\n                ...x,\n                start: startChar + 1,\n                length: endChar - startChar,\n              };\n            } else {\n              return {\n                ...x,\n                start: startChar + 1,\n                length: endChar - startChar,\n              };\n            }\n          }\n        })\n        .filter(x => x.start + x.length <= endPosition);\n\n      try {\n        const parsed = parse(text, { noLocation: true });\n\n        if (\n          parsed.definitions.some(x => x.kind === Kind.OPERATION_DEFINITION)\n        ) {\n          const op = parsed.definitions.find(\n            x => x.kind === Kind.OPERATION_DEFINITION\n          ) as OperationDefinitionNode;\n          if (!op.name) {\n            graphQLDiagnostics.push({\n              message: 'Operation should contain a name.',\n              start: node.getStart(),\n              code: MISSING_OPERATION_NAME_CODE,\n              length: originalNode.node.getText().length,\n              range: {} as any,\n              severity: 2,\n            } as any);\n          }\n        }\n      } catch (e) {}\n\n      return graphQLDiagnostics;\n    })\n    .flat()\n    .filter(Boolean) as Array<Diagnostic & { length: number; start: number }>;\n\n  const tsDiagnostics = diagnostics.map(diag => ({\n    file: source,\n    length: diag.length,\n    start: diag.start,\n    category:\n      diag.severity === 2\n        ? ts.DiagnosticCategory.Warning\n        : ts.DiagnosticCategory.Error,\n    code:\n      typeof diag.code === 'number'\n        ? diag.code\n        : diag.severity === 2\n        ? USING_DEPRECATED_FIELD_CODE\n        : SEMANTIC_DIAGNOSTIC_CODE,\n    messageText: diag.message.split('\\n')[0],\n  }));\n\n  if (isCallExpression) {\n    const usageDiagnostics =\n      checkFieldUsageInFile(\n        source,\n        nodes.map(x => x.node) as ts.NoSubstitutionTemplateLiteral[],\n        info\n      ) || [];\n\n    if (!usageDiagnostics) return tsDiagnostics;\n\n    return [...tsDiagnostics, ...usageDiagnostics];\n  } else {\n    return tsDiagnostics;\n  }\n};\n"],"names":["ts","CharacterStream","constructor","sourceText","this","_start","_pos","getStartOfToken","getCurrentPosition","eol","_sourceText","length","sol","peek","charAt","next","char","eat","pattern","_testNextCharacter","eatWhile","match","isMatched","didEat","eatSpace","skipToEnd","skipTo","position","consume","caseFold","token","RegExp","test","slice","Array","startsWith","backUp","num","column","indentation","indent","whiteSpaces","pos","charCodeAt","current","character","opt","ofRule","list","separator","isList","t","kind","style","p","value","isIgnored","ch","LexRules","Name","Punctuation","Number","String","Comment","ParseRules","Document","Definition","Kind","FRAGMENT_DEFINITION","ShortQuery","Query","word","name","Mutation","Subscription","VariableDefinitions","VariableDefinition","Variable","DefaultValue","SelectionSet","Selection","stream","AliasedField","Field","Arguments","Argument","FragmentSpread","InlineFragment","FragmentDefinition","butNot","rule","exclusions","ruleMatch","check","every","exclusion","TypeCondition","Value","NumberValue","StringValue","update","state","inBlockstring","endsWith","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Type","ListType","NonNullType","NamedType","type","_a","prevState","Directive","DirectiveDef","InterfaceDef","Implements","DirectiveLocation","SchemaDef","OperationTypeDef","ScalarDef","ObjectTypeDef","FieldDef","ArgumentsDef","InputValueDef","UnionDef","UnionMember","EnumDef","EnumValueDef","InputDef","ExtendDef","ExtensionDefinition","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","onlineParser","options","eatWhitespace","lexRules","parseRules","editorConfig","startState","initialState","level","step","needsSeparator","pushRule","DOCUMENT","getToken","popRule","needsAdvance","advanceRule","tabSize","indentLevel","Math","floor","lex","kinds","Object","keys","i","SpecialParseRules","backupState","assign","undefined","levels","concat","at","expected","call","unsuccessful","to","from","Invalid","rules","ruleKind","TypeError","successful","isArray","Range","start","end","containsPosition","line","setStart","Position","setEnd","lessThanOrEqualTo","setLine","setCharacter","specifiedSDLRules","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","KnownTypeNamesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","DIAGNOSTIC_SEVERITY","invariant","condition","message","Error","getDiagnostics","query","schema","customRules","isRelayCompatMode","externalFragments","ast","fragments","reduce","acc","node","print","enhancedQuery","parse","error","GraphQLError","range","getRange","location","queryText","parser","lines","split","_b","locations","severity","source","validateQuery","validationErrorAnnotations","validateWithCustomRules","isSchemaDocument","specifiedRules","filter","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","prototype","push","apply","validate","includes","nodes","DIRECTIVE","flatMap","annotations","deprecationWarningAnnotations","NoDeprecatedCustomRule","Warning","highlightedNodes","entries","highlightNode","variable","loc","highlightLoc","getLocation","templates","Set","isIIFE","isCallExpression","arguments","isFunctionExpression","expression","isArrowFunction","asteriskToken","modifiers","isGraphQLFunctionIdentifier","isIdentifier","has","escapedText","isTadaGraphQLFunction","checker","isLeftHandSideExpression","getTypeAtLocation","getProperty","isTadaGraphQLCall","isStringLiteralLike","isTadaPersistedCall","isPropertyAccessExpression","isGraphQLCall","isGraphQLTag","isTaggedTemplateExpression","tag","getSchemaName","typeChecker","brandTypeSymbol","brand","getTypeOfSymbol","isUnionOrIntersection","found","types","find","x","isStringLiteral","resolveTemplate","filename","info","combinedText","getText","resolvedSpans","templateText","template","isNoSubstitutionTemplateLiteral","templateSpans","addedCharacters","map","span","definitions","languageService","getDefinitionAtPosition","getStart","def","src","getSource","fileName","findNode","textSpan","parent","isVariableDeclaration","identifierName","originalStart","originalRange","initializer","text","replace","alteredSpan","identifier","original","new","isAsExpression","isObjectLiteralExpression","resolvedTemplate","JSON","Boolean","resolveTadaFragmentArray","isArrayLiteralExpression","elements","identifiers","element","program","getProgram","getSourceFile","sourceFile","getEnd","forEachChild","unrollFragment","fragment","externalSource","isPropertyAssignment","isBinaryExpression","right","checks","fragmentRefs","noLocation","forEach","definition","e","findAllCallExpressions","shouldSearchFragments","getTypeChecker","result","hasTriedToFindFragments","getAllFragments","findAllPersistedCallExpressions","isVariableStatement","declarationList","declarations","declaration","properties","property","possibleFragment","perf","performance","now","Date","warned","PROCESS","process","emitWarning","msg","code","fn","console","AC","globalThis","AbortController","AS","AbortSignal","_onabort","aborted","addEventListener","_","warnACPolyfill","signal","abort","reason","onabort","printACPolyfillWarning","env","LRU_CACHE_IGNORE_AC_WARNING","isPosInt","n","isFinite","getUintArray","max","pow","Uint8Array","Uint16Array","Uint32Array","MAX_SAFE_INTEGER","ZeroArray","size","super","fill","Stack","static","create","HeapCls","constructing","s","heap","pop","LRUCache","maxSize","dispose","disposeAfter","fetchMethod","calculatedSize","keyMap","keyList","valList","prev","head","tail","free","disposed","sizes","starts","ttls","hasDispose","hasFetchMethod","hasDisposeAfter","unsafeExposeInternals","c","isBackgroundFetch","backgroundFetch","k","index","context","moveToTail","indexes","rindexes","isStale","ttl","ttlResolution","ttlAutopurge","updateAgeOnGet","updateAgeOnHas","allowStale","noDisposeOnSet","noUpdateTTL","maxEntrySize","sizeCalculation","noDeleteOnFetchRejection","noDeleteOnStaleGet","allowStaleOnFetchRejection","allowStaleOnFetchAbort","ignoreFetchAbort","UintArray","Map","initializeSizeTracking","initializeTTLTracking","shouldWarn","add","getRemainingTTL","key","Infinity","setItemTTL","setTimeout","delete","unref","updateItemAge","statusTTL","status","cachedNow","getNow","remainingTTL","get","#updateItemAge","#statusTTL","#setItemTTL","#isStale","removeItemSize","requireSize","v","addItemSize","evict","entrySize","totalCalculatedSize","_i","#addItemSize","_s","_st","#requireSize","_k","_v","isValidIndex","rentries","rkeys","values","rvalues","Symbol","iterator","getOptions","__staleWhileFetching","thisp","rforEach","purgeStale","deleted","dump","arr","entry","age","unshift","load","clear","set","setOptions","maxEntrySizeExceeded","oldVal","__abortController","oldValue","dt","task","shift","val","hasOptions","peekOptions","ac","fetchOpts","cb","updateCache","ignoreAbort","fetchAborted","fetchError","fetchAbortIgnored","fetchResolved","fetchFail","fetchUpdated","er","allowStaleAborted","bf","returnedStale","__returned","fetchDispatched","Promise","pcall","res","rej","fmp","then","fetchRejected","b","hasOwnProperty","fetch","fetchOptions","forceRefresh","stale","staleVal","fetching","connect","FNV_PRIMES","FNV_OFFSETS","fnv1aModule","exports","fnv1a","string","hash","isUnicoded","characterCode","unescape","encodeURIComponent","bigInt","fnvPrime","BigInt","asUintN","UNUSED_FIELD_CODE","unwrapAbstractType","flags","TypeFlags","getVariableDeclaration","seen","isBlock","traverseArrayDestructuring","originalWip","allFields","isOmittedExpression","wip","crawlScope","isObjectBindingPattern","traverseDestructuring","results","_loop","binding","propertyName","joined","join","traverseResult","crawlResult","arrayMethods","inArrayMethod","isArrayBindingPattern","references","getReferencesAtPosition","ref","foundRef","pathParts","_ret","_loop2","isReturnStatement","isReduce","isSomeOrEvery","callExpression","func","getSymbolAtLocation","valueDeclaration","isFunctionDeclaration","parameters","varRes","isElementAccessExpression","argumentExpression","isNonNullExpression","getColocatedFragmentNames","imports","findAllImports","statements","isImportDeclaration","importSpecifierToFragments","imp","importClause","names","getFragmentsInSource","moduleSpecifier","namedBindings","isNamespaceImport","isNamedImportBindings","el","callExpressions","symbol","exportedNames","getExportsOfModule","symb","isSourceFile","parsed","generateHashForDocument","templateLiteral","foundFilename","spreads","visit","resolvedText","spreadName","fragmentDefinition","project","projectService","logger","createHash","digest","getDocumentReferenceFromTypeQuery","typeQuery","exprName","foundNode","getDocumentReferenceFromDocumentNode","documentNodeArgument","clientDirectives","MISSING_PERSISTED_TYPE_ARG","MISSING_PERSISTED_CODE_ARG","MISSING_PERSISTED_DOCUMENT","MISSMATCH_HASH_TO_DOCUMENT","ALL_DIAGNOSTICS","cache","runDiagnostics","config","templateIsCallExpression","diagnostics","originalNode","isTemplateExpression","isExpression","isExpressionStatement","startingPosition","endPosition","docFragments","documentFragments","some","y","schemaToUse","multi","graphQLDiagnostics","diag","matches","exec","startChar","endChar","locatedInFragment","OPERATION_DEFINITION","flat","tsDiagnostics","file","category","DiagnosticCategory","messageText","usageDiagnostics","checkFieldUsageInFile","trackFieldUsage","reservedKeys","nodeText","variableDeclaration","dataType","typeArguments","resolvedTypeArguments","apiTypeSymbol","apiType","callSignature","getCallSignatures","getReturnType","allAccess","inProgress","allPaths","fieldToLoc","enter","alias","path","selectionSet","leave","targetNode","scopeSymbols","getSymbolsInScope","SymbolFlags","BlockScopedVariable","scopeDataSymbol","scopeSymbol","typeOfScopeSymbol","tuplePropertySymbol","dataPropertySymbol","isBindingName","unused","aggregatedUnusedFields","unusedChildren","unusedFragmentLeaf","unusedField","parentField","field","unusedFields","stack","bubbleUpCallExpression","isToken","isTemplateSpan","bubbleUpTemplate","getGraphQLDiagnostics","findAllTaggedTemplateNodes","texts","cacheKey","version","shouldCheckForColocatedFragments","fragmentDiagnostics","persistedDiagnostics","isTypeQueryNode","generatedHash","moduleSpecifierToFragments","usedFragments","fragmentNames","missingFragments","getPersistedCodeFixAtPosition","isVariableDeclarationList","existingHash","replacement","init","modules","typescript","unrollTadaFragments","fragmentsArray"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,12,13]}